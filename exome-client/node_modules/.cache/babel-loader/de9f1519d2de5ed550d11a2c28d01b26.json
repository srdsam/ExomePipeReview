{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { patho } from '../services/vep.service';\nimport { parseVEP } from '../helpers/vep-parser';\n\nclass Vep extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePatho = () => {\n      const {\n        chromosome,\n        hgsvG\n      } = this.state;\n      patho.getPathogenicity(chromosome, hgsvG).then(data => {\n        parseVEP(data).then(results => {\n          this.setState({\n            data: results.results\n          });\n        });\n      }).then(() => {\n        this.setState(state => ({\n          dataLoading: !state.dataLoading\n        }));\n      });\n    };\n\n    this.state = {\n      isShow: false,\n      user: {},\n      data: [],\n      chromosome: {},\n      hgsvG: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      data: [],\n      dataLoading: true,\n      chromosome: this.props.chromosome,\n      hgsvG: this.props.hgsvG\n    });\n    this.updatePatho = this.updatePatho.bind(this);\n  }\n\n  render() {\n    const {\n      data,\n      dataLoading\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      onClick: this.updatePatho,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"Get VEP for \", String(this.props.hgsvG).substring(0, 15)), !dataLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"VEP Results\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, data.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, value.exists ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, index, \". \", value.transcript_id), value.metaSVM && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 37\n      }\n    }, \"metaSVM \", value.metaSVM, \" (\", value.metaSVM_prediction, \")\"), value.sift_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 37\n      }\n    }, \"SIFT score \", value.sift_score, \" (\", value.sift_prediction, \")\"), value.polyphen_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 37\n      }\n    }, \"polyphen_score \", value.polyphen_score, \" (\", value.polyphen_prediction, \")\"), value.cadd_raw && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    }, \"cadd_raw \", value.cadd_raw), value.polyphen2_hdiv_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 37\n      }\n    }, \"polyphen2_hdiv_score \", value.polyphen2_hdiv_score), value.metalr_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, \"metalr_score \", value.metalr_score, \" (\", value.metalr_prediction, \")\"), !value.metalr_score && !value.polyphen2_hdiv_score && !value.polyphen_score && !value.sift_score && !value.metaSVM && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 37\n      }\n    }, \"No scores returned from Ensemble REST API.\")) : JSON.stringify(value))))));\n  }\n\n}\n\nexport { Vep };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx"],"names":["React","Component","Spinner","Nav","Link","Table","Button","patho","parseVEP","Vep","constructor","props","updatePatho","chromosome","hgsvG","state","getPathogenicity","then","data","results","setState","dataLoading","isShow","user","componentDidMount","JSON","parse","localStorage","getItem","bind","render","String","substring","map","value","index","exists","transcript_id","metaSVM","metaSVM_prediction","sift_score","sift_prediction","polyphen_score","polyphen_prediction","cadd_raw","polyphen2_hdiv_score","metalr_score","metalr_prediction","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\n\nimport { patho } from '../services/vep.service';\n\nimport { parseVEP } from '../helpers/vep-parser'\n\nclass Vep extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isShow: false,\n            user: {},\n            data: [],\n            chromosome: {},\n            hgsvG: {}\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            data: [],\n            dataLoading: true,\n            chromosome: this.props.chromosome,\n            hgsvG: this.props.hgsvG\n        });\n\n        this.updatePatho = this.updatePatho.bind(this);\n    }\n\n    updatePatho = () => {\n        const { chromosome, hgsvG } = this.state\n        \n        patho.getPathogenicity(chromosome, hgsvG).then(data => {\n            parseVEP(data).then((results) => {\n                this.setState({ data: results.results })\n            })\n        }).then(() => {\n            this.setState(state => ({ dataLoading: !state.dataLoading }));\n        })\n    }\n    \n    render() {\n        const { data, dataLoading } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div>\n            <Button variant=\"info\" onClick={this.updatePatho} type=\"button\">\n                Get VEP for {String(this.props.hgsvG).substring(0,15)}\n            </Button>\n\n        {!dataLoading && \n            <div>\n                <h2>VEP Results</h2>\n\n                <div>\n                    {data.map((value, index) => (\n                        <div>\n                            {\n                            value.exists ?\n                            <div>\n                                <h3>{index}. {value.transcript_id}</h3>\n                                {value.metaSVM &&\n                                    <li>metaSVM {value.metaSVM} ({value.metaSVM_prediction})</li>}\n                                {value.sift_score &&\n                                    <li>SIFT score {value.sift_score} ({value.sift_prediction})</li>}\n                                {value.polyphen_score &&\n                                    <li>polyphen_score {value.polyphen_score} ({value.polyphen_prediction})</li>}\n                                {value.cadd_raw &&\n                                    <li>cadd_raw {value.cadd_raw}</li>}\n                                {value.polyphen2_hdiv_score &&\n                                    <li>polyphen2_hdiv_score {value.polyphen2_hdiv_score}</li>}\n                                {value.metalr_score &&\n                                    <li>metalr_score {value.metalr_score} ({value.metalr_prediction})</li>}\n                                {!value.metalr_score && !value.polyphen2_hdiv_score && !value.polyphen_score && !value.sift_score && !value.metaSVM &&\n                                    <div>\n                                        No scores returned from Ensemble REST API.\n                                    </div>}\n                            </div>\n                            :\n                            JSON.stringify(value)\n                            }\n                        </div>\n                    ))\n                    }\n                </div>\n            </div>\n            }\n\n        </div>\n    );\n    }\n}\n\nexport { Vep };\n\n"]},"metadata":{},"sourceType":"module"}