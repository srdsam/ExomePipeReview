{"ast":null,"code":"export async function parseVEP(data) {\n  let results = [];\n\n  if (data == undefined) {} else if (data.error) {\n    results.push(data.error);\n  } else if (data[0]) {\n    let scores = data[0].transcript_consequences;\n\n    if (data[0].transcript_consequences) {\n      for (var i = 0; i < scores.length; i++) {\n        let score = scores[i];\n        const VEP = {\n          exists: true,\n          transcript_id: score.transcript_id,\n          metaSVM: score.metasvm_score,\n          metaSVM_prediction: score.metasvm_pred,\n          sift_score: score.sift_score,\n          sift_prediction: score.sift_prediction,\n          polyphen_score: score.polyphen_score,\n          polyphen_prediction: score.polyphen_prediction,\n          cadd_raw: score.cadd_raw,\n          polyphen2_hdiv_score: score.polyphen2_hdiv_score,\n          metalr_score: score.metalr_score,\n          metalr_prediction: score.metalr_pred,\n          most_severe_consequence: score.most_severe_consequence\n        };\n        results.push(VEP);\n      }\n    } else {\n      results.push(\"No transcript consequences\");\n    }\n  } else {\n    const VEP = {\n      exists: false\n    };\n    results.push(VEP);\n  }\n\n  console.log(results);\n  return {\n    results\n  };\n}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/vep-parser.js"],"names":["parseVEP","data","results","undefined","error","push","scores","transcript_consequences","i","length","score","VEP","exists","transcript_id","metaSVM","metasvm_score","metaSVM_prediction","metasvm_pred","sift_score","sift_prediction","polyphen_score","polyphen_prediction","cadd_raw","polyphen2_hdiv_score","metalr_score","metalr_prediction","metalr_pred","most_severe_consequence","console","log"],"mappings":"AAAA,OAAO,eAAeA,QAAf,CAAwBC,IAAxB,EAA8B;AAEjC,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAID,IAAI,IAAIE,SAAZ,EAAuB,CAEtB,CAFD,MAEO,IAAIF,IAAI,CAACG,KAAT,EAAgB;AAEnBF,IAAAA,OAAO,CAACG,IAAR,CAAaJ,IAAI,CAACG,KAAlB;AAEH,GAJM,MAIA,IAAIH,IAAI,CAAC,CAAD,CAAR,EAAa;AAChB,QAAIK,MAAM,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQM,uBAArB;;AAEA,QAAIN,IAAI,CAAC,CAAD,CAAJ,CAAQM,uBAAZ,EAAqC;AACjC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnC,YAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AAEA,cAAMG,GAAG,GAAG;AACRC,UAAAA,MAAM,EAAE,IADA;AAERC,UAAAA,aAAa,EAAEH,KAAK,CAACG,aAFb;AAGRC,UAAAA,OAAO,EAAEJ,KAAK,CAACK,aAHP;AAIRC,UAAAA,kBAAkB,EAAEN,KAAK,CAACO,YAJlB;AAKRC,UAAAA,UAAU,EAAER,KAAK,CAACQ,UALV;AAMRC,UAAAA,eAAe,EAAET,KAAK,CAACS,eANf;AAORC,UAAAA,cAAc,EAAEV,KAAK,CAACU,cAPd;AAQRC,UAAAA,mBAAmB,EAAEX,KAAK,CAACW,mBARnB;AASRC,UAAAA,QAAQ,EAAEZ,KAAK,CAACY,QATR;AAURC,UAAAA,oBAAoB,EAAEb,KAAK,CAACa,oBAVpB;AAWRC,UAAAA,YAAY,EAAEd,KAAK,CAACc,YAXZ;AAYRC,UAAAA,iBAAiB,EAAEf,KAAK,CAACgB,WAZjB;AAaRC,UAAAA,uBAAuB,EAAEjB,KAAK,CAACiB;AAbvB,SAAZ;AAiBAzB,QAAAA,OAAO,CAACG,IAAR,CAAaM,GAAb;AACH;AACJ,KAvBD,MAuBO;AAEHT,MAAAA,OAAO,CAACG,IAAR,CAAa,4BAAb;AACH;AAEJ,GA/BM,MA+BA;AACH,UAAMM,GAAG,GAAG;AACRC,MAAAA,MAAM,EAAE;AADA,KAAZ;AAGAV,IAAAA,OAAO,CAACG,IAAR,CAAaM,GAAb;AACH;;AAEDiB,EAAAA,OAAO,CAACC,GAAR,CAAY3B,OAAZ;AAEA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH","sourcesContent":["export async function parseVEP(data) {\n\n    let results = []\n\n    if (data == undefined) {\n\n    } else if (data.error) {\n\n        results.push(data.error)\n\n    } else if (data[0]) {\n        let scores = data[0].transcript_consequences\n\n        if (data[0].transcript_consequences) {\n            for (var i = 0; i < scores.length; i++){\n                let score = scores[i]\n    \n                const VEP = {\n                    exists: true,\n                    transcript_id: score.transcript_id,\n                    metaSVM: score.metasvm_score,\n                    metaSVM_prediction: score.metasvm_pred,\n                    sift_score: score.sift_score,\n                    sift_prediction: score.sift_prediction,\n                    polyphen_score: score.polyphen_score,\n                    polyphen_prediction: score.polyphen_prediction,\n                    cadd_raw: score.cadd_raw,\n                    polyphen2_hdiv_score: score.polyphen2_hdiv_score,\n                    metalr_score: score.metalr_score,\n                    metalr_prediction: score.metalr_pred,\n                    most_severe_consequence: score.most_severe_consequence\n    \n                }\n    \n                results.push(VEP)\n            }\n        } else {\n\n            results.push(\"No transcript consequences\")\n        }\n\n    } else {\n        const VEP = {\n            exists: false\n        }\n        results.push(VEP)\n    }\n\n    console.log(results)\n\n    return { results }\n}"]},"metadata":{},"sourceType":"module"}