{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nexport const generateReport = ({\n  data,\n  fileName\n}) => {\n  const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  const fileExtension = '.xlsx';\n\n  const generateReport = (data, fileName) => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const dataBlob = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(dataBlob, fileName + fileExtension);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: e => generateReport(data, fileName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"Generate Report 2\"));\n}; //         <Button variant=\"warning\" onClick={(e) => exportToCSV(csvData,fileName)}>Export</Button>\n\nclass genReport extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateReport = () => {\n      const {\n        chromosome,\n        hgsvG,\n        clicked\n      } = this.state;\n      this.setState({\n        clicked: true\n      });\n      patho.getPathogenicity(chromosome, hgsvG).then(data => {\n        parseVEP(data).then(data => {\n          this.setState({\n            data: data.results\n          });\n          this.setState({\n            clicked: false\n          });\n          this.setState({\n            consequence: data.consequence\n          });\n        });\n      }).then(() => {\n        this.setState(state => ({\n          dataLoading: !state.dataLoading\n        }));\n      });\n    };\n\n    this.state = {\n      user: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user'))\n    });\n    this.generateReport = this.generateReport.bind(this);\n  }\n\n  render() {\n    const {\n      data,\n      dataLoading,\n      clicked,\n      consequence\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => generateReport(data, fileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"Generate Report 2\"));\n  }\n\n}\n\nexport { genReport };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx"],"names":["React","Button","FileSaver","XLSX","generateReport","data","fileName","fileType","fileExtension","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","dataBlob","Blob","saveAs","display","justifyContent","alignItems","e","genReport","Component","constructor","props","chromosome","hgsvG","clicked","state","setState","patho","getPathogenicity","then","parseVEP","results","consequence","dataLoading","user","componentDidMount","JSON","parse","localStorage","getItem","bind","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nexport const generateReport = ({data, fileName}) => {\n\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    const generateReport = (data, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const dataBlob = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(dataBlob, fileName + fileExtension);\n    }\n\n    return (\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n            <Button onClick={(e) => generateReport(data, fileName)}>\n                Generate Report 2\n            </Button>\n        </div>\n    )\n}\n\n//         <Button variant=\"warning\" onClick={(e) => exportToCSV(csvData,fileName)}>Export</Button>\n\nclass genReport extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n        });\n\n        this.generateReport = this.generateReport.bind(this);\n    }\n\n    generateReport = () => {\n        const { chromosome, hgsvG, clicked } = this.state\n\n        this.setState({ clicked: true })\n        \n        patho.getPathogenicity(chromosome, hgsvG).then(data => {\n            parseVEP(data).then(( data ) => {\n                this.setState({ data: data.results })\n                this.setState({ clicked: false })\n                this.setState({ consequence: data.consequence })\n\n            })\n        }).then(() => {\n            this.setState(state => ({ dataLoading: !state.dataLoading }));\n        })\n    }\n    \n    render() {\n        const { data, dataLoading, clicked, consequence } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n            <Button onClick={(e) => generateReport(data, fileName)}>\n                Generate Report 2\n            </Button>\n        </div>\n    );\n    }\n}\n\nexport { genReport };\n\n"]},"metadata":{},"sourceType":"module"}