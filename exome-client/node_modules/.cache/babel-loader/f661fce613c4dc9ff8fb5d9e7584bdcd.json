{"ast":null,"code":"import _classCallCheck from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import Spinner from'react-bootstrap/Spinner';import Table from'react-bootstrap/Table';import Button from'react-bootstrap/Button';import Select from'react-select';import*as FileSaver from'file-saver';import*as XLSX from'xlsx';import{Navibar}from'../component/Navibar';import{Clinvar}from'../component/Clinvar';import{api}from'../services/api.service';import{parse}from'../helpers/exomiser-parser';import{Vep}from'../component/Vep';var SamplePage=/*#__PURE__*/function(_React$Component){_inherits(SamplePage,_React$Component);var _super=_createSuper(SamplePage);function SamplePage(props){var _this;_classCallCheck(this,SamplePage);_this=_super.call(this,props);_this.state={user:{},users:[],proband:{},data:[],genes:[],showElem:[],reviewStatus:[],geneList:[],ACMG:[]};return _this;}_createClass(SamplePage,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.setState({user:JSON.parse(localStorage.getItem('user')),users:{loading:true},proband:window.location.pathname.split(':')[1],isLoading:true,data:{loading:true},genes:[],showElem:[],reviewStatus:JSON.parse(localStorage.getItem('reviewStatus'+this.state.proband))||[],geneList:JSON.parse(localStorage.getItem('geneList'+this.state.proband))||[],ACMG:\"UNK\"});console.log(JSON.parse(localStorage.getItem('reviewStatus')));// Retrieves analysis which is used throughout code\napi.getProbandById(window.location.pathname.split(':')[1]).then(function(data){var _parse=parse(data),genes=_parse.genes,raw=_parse.raw;_this2.setState({data:genes});_this2.setState({isLoading:false});});// Retrieves genes which are used in Select component \napi.getGenes(window.location.pathname.split(':')[1]).then(function(data){_this2.setState({genes:data});_this2.setState({showElem:Array(data.length).fill(false)});if(!_this2.state.reviewStatus){_this2.setState({reviewStatus:Array(data.length).fill(\"Incomplete\")});}});}// Ensures that only the selected gene is displayed\n},{key:\"showGene\",value:function showGene(label,value){var tempArr=Array(this.state.showElem.length).fill(false);tempArr[value]=true;this.setState({showElem:tempArr});}// Updates the review status in the Select component\n},{key:\"updateReviewStatus\",value:function updateReviewStatus(val,i){var tempArr=this.state.reviewStatus;tempArr[i]=val;localStorage.setItem('reviewStatus'+this.state.proband,JSON.stringify(tempArr));this.setState({reviewStatus:tempArr});}// Updates the list of likely causative variants for the report\n},{key:\"updateGeneList\",value:function updateGeneList(value,i,gene,proband){var tempArr=this.state.geneList;var index=this.state.showElem.indexOf(true);tempArr.push({Family_ID:\"UNK\",Individual_ID:\"UNK\",Sample_ID:this.state.proband,Gene:this.state.genes[index].text,Ensembl_ID:value.transcriptAnnotations[0].accession,Variant:\"\".concat(value.chromosomeName,\":\").concat(value.position,\":\").concat(value.ref,\":\").concat(value.alt),Inheritance:value.contributingInheritanceModes.join(\", \"),OMIM_Name:this.state.data[index].OMIM.map(function(val){return val.diseaseName;}).length>0?this.state.data[index].OMIM.map(function(val){return val.diseaseName;}).join(\", \"):\"No Results\",OMIM_ID:this.state.data[index].OMIM.map(function(val){return val.diseaseId;}).length>0?this.state.data[index].OMIM.map(function(val){return val.diseaseId;}).join(\", \"):\"No Results\",cDNA:value.transcriptAnnotations[0].hgvsCdna,Protein:value.transcriptAnnotations[0].hgvsProtein,ACMG:this.state.ACMG});console.log(tempArr);localStorage.setItem('geneList'+this.state.proband,JSON.stringify(tempArr));this.setState({geneList:tempArr});}// Allows client to add ACMG data to report\n},{key:\"handleAcmgOnChange\",value:function handleAcmgOnChange(e){this.setState({ACMG:e.target.value});}// Generates report from geneList variable\n},{key:\"generateReport\",value:function generateReport(){var _this$state=this.state,geneList=_this$state.geneList,proband=_this$state.proband;console.log(\"Clicked\");var data=geneList;var fileName=\"GGC_\"+proband;var fileType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';var fileExtension='.xlsx';var ws=XLSX.utils.json_to_sheet(data);var wb={Sheets:{'data':ws},SheetNames:['data']};var excelBuffer=XLSX.write(wb,{bookType:'xlsx',type:'array'});var dataBlob=new Blob([excelBuffer],{type:fileType});FileSaver.saveAs(dataBlob,fileName+fileExtension);}},{key:\"render\",value:function render(){var _this3=this;var _this$state2=this.state,proband=_this$state2.proband,data=_this$state2.data,isLoading=_this$state2.isLoading,genes=_this$state2.genes,showElem=_this$state2.showElem,reviewStatus=_this$state2.reviewStatus,geneList=_this$state2.geneList,ACMG=_this$state2.ACMG;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Navibar,null),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center'}},/*#__PURE__*/React.createElement(Button,{onClick:function onClick(e){return _this3.generateReport();}},\"Generate Report\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",{style:{fontSize:\"50px\"}},\"Proband - \",/*#__PURE__*/React.createElement(\"i\",{style:{fontSize:\"50px\"}},proband.toString()))),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Select,{defaultMenuIsOpen:true,options:genes.map(function(val,index){return{label:val.text+\" [Review of Gene: \"+reviewStatus[index]+\"]\",value:index};}),onChange:function onChange(opt){return _this3.showGene(opt.label,opt.value);}}),/*#__PURE__*/React.createElement(\"br\",null),isLoading&&/*#__PURE__*/React.createElement(Spinner,{animation:\"border\",role:\"status\",variant:\"primary\",size:\"lg\"},/*#__PURE__*/React.createElement(\"span\",{className:\"sr-only\"},\"Loading...\")),!isLoading&&data.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,showElem[index]&&/*#__PURE__*/React.createElement(\"div\",{className:\"jumbotron jumbotron-fluid\",key:genes[index]},/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"h1\",null,value.name),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-8\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Inheritance of Gene:\"),value.compatibleInheritanceModes.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"li\",null,value));})),/*#__PURE__*/React.createElement(\"br\",null),console.log(value),value.OMIM.length>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"OMIM Associated Diseases:\"),value.OMIM.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"li\",null,value.diseaseName));})),/*#__PURE__*/React.createElement(\"br\",null),value.HiPhive.length>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"HiPhive Results:\"),value.HiPhive.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",{style:{fontSize:\"12px\"}},\"Organism: \",value.model.organism),/*#__PURE__*/React.createElement(\"div\",null,\"Model Score: \",value.score),value.model.diseaseTerm&&/*#__PURE__*/React.createElement(\"div\",null,\"Disease Term: \",value.model.diseaseTerm),value.bestModelPhenotypeMatches&&value.bestModelPhenotypeMatches.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,\"Matched Phenotype: \",JSON.stringify(value.match.label));}));})),/*#__PURE__*/React.createElement(\"br\",null),value.variantEvaluations.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Vep,{chromosome:value.chromosomeName,hgsvG:value.transcriptAnnotations[0].hgvsGenomic,hgsvC:value.transcriptAnnotations[0].hgvsCdna,accession:value.transcriptAnnotations[0].accession}),/*#__PURE__*/React.createElement(\"br\",null));})),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Exomiser Scores:\"),/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:\"left\"}},\"Variant Score: \",value.variantScore),/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:\"left\"}},\"Priority Score: \",value.priorityScore),/*#__PURE__*/React.createElement(\"p\",{style:{textAlign:\"left\"}},\"Combined Score: \",value.combinedScore),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Clinvar,{geneID:genes[index]}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",null,\"ACMG Intepretation to add to Report for Selected Variant\",/*#__PURE__*/React.createElement(\"div\",{className:\"input-group mb-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"input-group-prepend\"},/*#__PURE__*/React.createElement(\"span\",{className:\"input-group-text\",id:\"basic-addon1\"},\"ACMG: \")),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"form-control\",placeholder:\"Username\",\"aria-label\":\"Username\",value:ACMG,onChange:function onChange(e){return _this3.handleAcmgOnChange(e);},\"aria-describedby\":\"basic-addon1\"}))))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-12\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Variants Analysis by Exomiser\"),/*#__PURE__*/React.createElement(Table,{striped:true,bordered:true,hover:true,variant:\"dark\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Variant\"),/*#__PURE__*/React.createElement(\"th\",null,\"Effect Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Variant Score\"),/*#__PURE__*/React.createElement(\"th\",null,\"Phred Score\"),/*#__PURE__*/React.createElement(\"th\",null,\"Frequency Score\"),/*#__PURE__*/React.createElement(\"th\",null,\"Frequency Sources\"),/*#__PURE__*/React.createElement(\"th\",null,\"Transcript Annotations\"),/*#__PURE__*/React.createElement(\"th\",null,\"Pathogenecity Data\"),/*#__PURE__*/React.createElement(\"th\",null,\"Add to Report\"))),/*#__PURE__*/React.createElement(\"tbody\",null,value.variantEvaluations.map(function(value,index){return/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",{style:{maxWidth:\"20px\",wordWrap:\"break-word\"}},value.chromosomeName,\":\",value.position,\":\",value.ref,\":\",value.alt),/*#__PURE__*/React.createElement(\"td\",null,value.variantEffect),/*#__PURE__*/React.createElement(\"td\",null,value.variantScore),/*#__PURE__*/React.createElement(\"td\",null,value.phredScore),/*#__PURE__*/React.createElement(\"td\",null,value.frequencyScore),/*#__PURE__*/React.createElement(\"td\",{style:{maxWidth:\"200px\"}},value.frequencyData.knownFrequencies.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,value.source,\" : \",value.frequency);})),/*#__PURE__*/React.createElement(\"td\",{style:{columnSpan:\"50px\",maxWidth:\"250px\",wordWrap:\"break-word\"}},value.transcriptAnnotations.map(function(value,index){return/*#__PURE__*/React.createElement(\"li\",null,value.hgvsCdna,\": \",value.variantEffect,\" (\",value.accession,\") \",/*#__PURE__*/React.createElement(\"br\",null));})),/*#__PURE__*/React.createElement(\"td\",null,value.pathogenicityData.clinVarData.empty&&/*#__PURE__*/React.createElement(\"div\",null,\"No Clinvar Results\"),!value.pathogenicityData.clinVarData.empty&&/*#__PURE__*/React.createElement(\"div\",null,\"Review Status: \",value.pathogenicityData.clinVarData.reviewStatus,/*#__PURE__*/React.createElement(\"br\",null),\"Intepretation: \",value.pathogenicityData.clinVarData.primaryInterpretation),/*#__PURE__*/React.createElement(\"br\",null),value.pathogenicityData.mostPathogenicScore&&value.pathogenicityData.predictedPathogenicityScores.map(function(value,index){return/*#__PURE__*/React.createElement(\"div\",null,\"source: \",value.source,/*#__PURE__*/React.createElement(\"br\",null),\"score: \",value.score);})),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(Button,{onClick:function onClick(e){return _this3.updateGeneList(value,index,value.transcriptAnnotations[0].geneSymbol);}},\"Add\")));}))),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center'}},/*#__PURE__*/React.createElement(Button,{onClick:function onClick(e){return _this3.updateReviewStatus(\"Complete\",index);}},\"Gene Reviewed\")))))));}));}}]);return SamplePage;}(React.Component);export{SamplePage};","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/samplePage/samplePage.jsx"],"names":["React","Spinner","Table","Button","Select","FileSaver","XLSX","Navibar","Clinvar","api","parse","Vep","SamplePage","props","state","user","users","proband","data","genes","showElem","reviewStatus","geneList","ACMG","setState","JSON","localStorage","getItem","loading","window","location","pathname","split","isLoading","console","log","getProbandById","then","raw","getGenes","Array","length","fill","label","value","tempArr","val","i","setItem","stringify","gene","index","indexOf","push","Family_ID","Individual_ID","Sample_ID","Gene","text","Ensembl_ID","transcriptAnnotations","accession","Variant","chromosomeName","position","ref","alt","Inheritance","contributingInheritanceModes","join","OMIM_Name","OMIM","map","diseaseName","OMIM_ID","diseaseId","cDNA","hgvsCdna","Protein","hgvsProtein","e","target","fileName","fileType","fileExtension","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","dataBlob","Blob","saveAs","display","justifyContent","alignItems","generateReport","fontSize","toString","opt","showGene","name","compatibleInheritanceModes","HiPhive","model","organism","score","diseaseTerm","bestModelPhenotypeMatches","match","variantEvaluations","hgvsGenomic","textAlign","variantScore","priorityScore","combinedScore","handleAcmgOnChange","maxWidth","wordWrap","variantEffect","phredScore","frequencyScore","frequencyData","knownFrequencies","source","frequency","columnSpan","pathogenicityData","clinVarData","empty","primaryInterpretation","mostPathogenicScore","predictedPathogenicityScores","updateGeneList","geneSymbol","updateReviewStatus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\n\nimport Select from 'react-select';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nimport { Navibar } from '../component/Navibar';\nimport { Clinvar } from '../component/Clinvar'\n\nimport { api } from '../services/api.service';\nimport { parse } from '../helpers/exomiser-parser';\nimport { Vep } from '../component/Vep';\n\nclass SamplePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n            users: [],\n            proband: {},\n            data: [],\n            genes: [],\n            showElem: [],\n            reviewStatus: [],\n            geneList: [],\n            ACMG: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            users: { loading: true },\n            proband: window.location.pathname.split(':')[1],\n            isLoading: true,\n            data: { loading: true },\n            genes: [],\n            showElem: [],\n            reviewStatus: JSON.parse(localStorage.getItem('reviewStatus' + this.state.proband)) || [],\n            geneList: JSON.parse(localStorage.getItem('geneList' + this.state.proband)) || [],\n            ACMG: \"UNK\"\n        });\n\n        console.log(JSON.parse(localStorage.getItem('reviewStatus')))\n\n        // Retrieves analysis which is used throughout code\n        api.getProbandById(window.location.pathname.split(':')[1]).then(data => {\n            const { genes, raw } = parse(data);\n            this.setState({ data: genes })\n            this.setState({ isLoading: false})\n        })\n\n        // Retrieves genes which are used in Select component \n        api.getGenes(window.location.pathname.split(':')[1]).then(data => {\n            this.setState({ genes: data})\n            this.setState({ showElem: Array(data.length).fill(false) })\n            if (!this.state.reviewStatus){\n                this.setState({ reviewStatus: Array(data.length).fill(\"Incomplete\") })\n            }\n        })\n\n    }\n\n    // Ensures that only the selected gene is displayed\n    showGene(label, value) {\n        let tempArr = Array(this.state.showElem.length).fill(false)\n\n        tempArr[value] = true\n\n        this.setState({ showElem: tempArr })\n    }\n\n    // Updates the review status in the Select component\n    updateReviewStatus(val, i) {\n        let tempArr = this.state.reviewStatus\n\n        tempArr[i] = val\n\n        localStorage.setItem('reviewStatus' + this.state.proband, JSON.stringify(tempArr))\n\n        this.setState({ reviewStatus: tempArr })\n    }\n\n    // Updates the list of likely causative variants for the report\n    updateGeneList(value, i, gene, proband) {\n        let tempArr = this.state.geneList\n\n        let index = this.state.showElem.indexOf(true)\n\n        tempArr.push({\n            Family_ID: \"UNK\",\n            Individual_ID: \"UNK\",\n            Sample_ID: this.state.proband,\n            Gene: this.state.genes[index].text,\n            Ensembl_ID: value.transcriptAnnotations[0].accession,\n            Variant: `${value.chromosomeName}:${value.position}:${value.ref}:${value.alt}`,\n            Inheritance: value.contributingInheritanceModes.join(\", \"),\n            OMIM_Name: this.state.data[index].OMIM.map(val => val.diseaseName).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseName).join(\", \") : \"No Results\",\n            OMIM_ID: this.state.data[index].OMIM.map(val => val.diseaseId).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseId).join(\", \") : \"No Results\",\n            cDNA: value.transcriptAnnotations[0].hgvsCdna,\n            Protein: value.transcriptAnnotations[0].hgvsProtein,\n            ACMG: this.state.ACMG,\n        })\n\n        console.log(tempArr)\n\n        localStorage.setItem('geneList' + this.state.proband, JSON.stringify(tempArr))\n\n        this.setState({ geneList: tempArr })\n    }\n\n    // Allows client to add ACMG data to report\n    handleAcmgOnChange(e) {\n        this.setState({\n          ACMG: e.target.value\n        });\n      }\n\n    // Generates report from geneList variable\n    generateReport() {\n        const { geneList, proband } = this.state\n\n        console.log(\"Clicked\")\n\n        const data = geneList\n        const fileName = \"GGC_\" + proband\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const dataBlob = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(dataBlob, fileName + fileExtension);\n    }\n\n    render() {\n        const { proband, data, isLoading, genes, showElem, reviewStatus, geneList, ACMG } = this.state;\n\n        return (\n\n            <div>\n\n                <Navibar></Navibar>\n\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n                <Button onClick={(e) => this.generateReport()}>\n                    Generate Report\n                </Button>\n                </div>\n\n                <div>\n                    <h1 style={{ fontSize: \"50px\" }}>Proband - <i style={{ fontSize: \"50px\" }}>{proband.toString()}</i></h1>\n                </div>\n\n                <br></br>\n                <Select defaultMenuIsOpen={true} options={genes.map((val, index) => ({ label: val.text + \" [Review of Gene: \" + reviewStatus[index] + \"]\", value: index }))} onChange={opt => this.showGene(opt.label, opt.value)}/>\n                <br></br>\n                {isLoading && \n                    <Spinner animation=\"border\" role=\"status\" variant=\"primary\" size=\"lg\">\n                    <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                }\n                {!isLoading &&\n                    data.map((value, index) => (\n                        <div>\n                            {showElem[index] &&\n                            <div className=\"jumbotron jumbotron-fluid\" key={genes[index]}>\n                                <div className=\"container\">\n                                    <h1>{value.name}</h1>\n                                    <div className=\"row\">\n                                        <div className='col-md-8'>\n                                            <div><h2>Inheritance of Gene:</h2>{value.compatibleInheritanceModes.map((value, index) => (\n                                                <div><li>{value}</li></div>\n                                            ))}</div>\n                                            <br></br>\n\n                                            {console.log(value)}\n\n                                            {value.OMIM.length>0 &&\n\n                                                <div><h2>OMIM Associated Diseases:</h2>{value.OMIM.map((value, index) => (\n                                                    <div>\n                                                        <li>{value.diseaseName}</li>\n                                                    </div>\n                                                ))}</div>\n                                            }\n                                            <br></br>\n                                            {value.HiPhive.length>0 &&\n                                                <div><h2>HiPhive Results:</h2>{value.HiPhive.map((value, index) => (\n                                                    <div>\n                                                        <h3 style={{ fontSize: \"12px\"}}>Organism: {value.model.organism}</h3>\n                                                        <div>Model Score: {value.score}</div>\n                                                        {value.model.diseaseTerm &&\n                                                            <div>\n                                                                Disease Term: {value.model.diseaseTerm}\n                                                            </div>\n                                                                }\n                                                        {value.bestModelPhenotypeMatches &&\n                                                            value.bestModelPhenotypeMatches.map((value, index) => (\n                                                                <div>\n                                                                    Matched Phenotype: {JSON.stringify(value.match.label)}\n                                                                </div>\n                                                            ))}\n                                                    </div>\n                                                ))}</div>}\n                                            <br></br>\n                                            {value.variantEvaluations.map((value, index) => (\n                                                <div>\n                                                    <Vep chromosome={value.chromosomeName} hgsvG={value.transcriptAnnotations[0].hgvsGenomic} hgsvC={value.transcriptAnnotations[0].hgvsCdna} accession={value.transcriptAnnotations[0].accession} />\n                                                    <br></br>\n                                                </div>\n                                            ))}\n                                        </div>\n                                        <div className='col-md-4'>\n                                            <h2>Exomiser Scores:</h2>\n                                            <p style={{ textAlign: \"left\" }}>Variant Score: {value.variantScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Priority Score: {value.priorityScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Combined Score: {value.combinedScore}</p> \n                                            <br></br>\n                                            <Clinvar geneID={genes[index]}/>\n                                            <br></br>\n                                            <div>\n                                                ACMG Intepretation to add to Report for Selected Variant\n                                            <div className=\"input-group mb-3\">\n                                                <div className=\"input-group-prepend\">\n                                                    <span className=\"input-group-text\" id=\"basic-addon1\">ACMG: </span>\n                                                </div>\n                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" value={ACMG} onChange={ (e) => this.handleAcmgOnChange(e) } aria-describedby=\"basic-addon1\"></input>\n                                            </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\"> \n                                    <div className='col-md-12'>\n                                        <h2>Variants Analysis by Exomiser</h2>\n                                        <Table striped bordered hover variant=\"dark\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Variant</th>\n                                                    <th>Effect Type</th>\n                                                    <th>Variant Score</th>\n                                                    <th>Phred Score</th>\n                                                    <th>Frequency Score</th>\n                                                    <th>Frequency Sources</th>\n                                                    <th>Transcript Annotations</th>\n                                                    <th>Pathogenecity Data</th>\n                                                    <th>Add to Report</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {value.variantEvaluations.map((value, index) => (\n                                                <tr>\n                                                    <td style={{ maxWidth: \"20px\", wordWrap: \"break-word\" }}>{value.chromosomeName}:{value.position}:{value.ref}:{value.alt}</td>\n                                                    <td>{value.variantEffect}</td>\n                                                    <td>{value.variantScore}</td>\n                                                    <td>{value.phredScore}</td>\n                                                    <td>{value.frequencyScore}</td>\n                                                    <td style={{ maxWidth: \"200px\"}}>{value.frequencyData.knownFrequencies.map((value, index) => (\n                                                        <div>{value.source} : {value.frequency}</div>\n                                                    ))}</td>\n                                                    <td style={{ columnSpan: \"50px\", maxWidth: \"250px\", wordWrap: \"break-word\"}}>{value.transcriptAnnotations.map((value, index) => (\n                                                        <li>\n                                                            {value.hgvsCdna}: {value.variantEffect} ({value.accession}) <br></br>\n                                                        </li>\n                                                    ))}</td>\n                                                    <td>\n                                                        {value.pathogenicityData.clinVarData.empty &&\n                                                            <div>No Clinvar Results</div>\n                                                        }\n                                                        {!value.pathogenicityData.clinVarData.empty &&\n                                                            <div>\n                                                                Review Status: {value.pathogenicityData.clinVarData.reviewStatus}\n                                                                <br></br>\n                                                                Intepretation: {value.pathogenicityData.clinVarData.primaryInterpretation}\n                                                            </div>\n                                                        }\n                                                        <br></br>\n                                                        {value.pathogenicityData.mostPathogenicScore &&\n                                                            value.pathogenicityData.predictedPathogenicityScores.map((value, index) => (\n                                                                <div>\n                                                                    source: {value.source}\n                                                                    <br></br>\n                                                                    score: {value.score}\n                                                                </div>\n                                                            ))}                                                    \n                                                        \n                                                    </td>\n                                                    <td>\n                                                    <Button onClick={(e) => this.updateGeneList(value, index, value.transcriptAnnotations[0].geneSymbol)}>\n                                                        Add\n                                                    </Button>\n                                                    </td>\n\n                                                </tr>\n                                                ))}\n                                            </tbody>\n                                        </Table>\n                                        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n                                        <Button onClick={(e) => this.updateReviewStatus(\"Complete\", index)}>\n                                            Gene Reviewed\n                                        </Button>\n                                        </div>\n                                    </div>\n                                    </div>\n                                </div>\n                            </div>\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport { SamplePage };\n"]},"metadata":{},"sourceType":"module"}