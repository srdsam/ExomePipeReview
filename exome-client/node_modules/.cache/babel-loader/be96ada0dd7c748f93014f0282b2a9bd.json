{"ast":null,"code":"import _regeneratorRuntime from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{userService}from'./user.service';import{authHeader}from'../helpers/auth-header';// Need to update to work with server.js responses!!\nfunction handleResponse(response){return response.text().then(function(text){var data=text&&JSON.parse(text);if(response.status!==200){if(response.status===401){// auto logout if 401 response returned from api\nuserService.logout();window.location.reload(true);}var error=data&&data.message||response.statusText;return Promise.reject(error);}return data;});}var apiUrl=\"http://localhost:8002\";function getProbands(){var requestOptions={method:'GET',headers:authHeader()};return fetch(\"\".concat(apiUrl,\"/proband\"),requestOptions).then(function(response){return response.json();}).then(function(result){console.log(result);return result;});}function getProbandById(_x){return _getProbandById.apply(this,arguments);}function _getProbandById(){_getProbandById=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proband){var requestOptions,cProband;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:requestOptions={method:'GET',headers:authHeader()};cProband=proband.toString();_context.next=4;return fetch(\"\".concat(apiUrl,\"/proband/id?id=\").concat(cProband),requestOptions).then(function(response){return response.json();}).then(function(result){console.log(result);return result;});case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},_callee);}));return _getProbandById.apply(this,arguments);}function getPheno(proband){var requestOptions={method:'GET',headers:authHeader()};console.log(\"Get Pheno called: \"+proband);return fetch(\"\".concat(apiUrl,\"/proband/pheno?id=\").concat(proband.substring(1,proband.length-1)),requestOptions).then(function(response){return response.json();}).then(function(result){var text=result.map(function(_ref){var text=_ref.text;return text;});console.log(text.join(\" - \"));return text.join(\" - \");});}function getGenes(proband){var requestOptions={method:'GET',headers:authHeader()};return fetch(\"\".concat(apiUrl,\"/proband/genes?id=\").concat(proband),requestOptions).then(handleResponse).then(function(data){if(data){return data;}return\"Error\";});}export var api={getProbands:getProbands,getProbandById:getProbandById,getPheno:getPheno,getGenes:getGenes};","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/services/api.service.js"],"names":["userService","authHeader","handleResponse","response","text","then","data","JSON","parse","status","logout","window","location","reload","error","message","statusText","Promise","reject","apiUrl","getProbands","requestOptions","method","headers","fetch","json","result","console","log","getProbandById","proband","cProband","toString","getPheno","substring","length","map","join","getGenes","api"],"mappings":"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","sourcesContent":["import { userService } from './user.service'\nimport { authHeader } from '../helpers/auth-header';\n\n// Need to update to work with server.js responses!!\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (response.status !== 200) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                userService.logout();\n                window.location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n\nconst apiUrl = \"http://localhost:8002\"\n\nfunction getProbands() {\n\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    return fetch(`${apiUrl}/proband`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            console.log(result)\n            return result\n        })\n}\n\nasync function getProbandById(proband) {\n\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    let cProband = proband.toString()\n\n    return await fetch(`${apiUrl}/proband/id?id=${cProband}`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            console.log(result)\n            return result\n        })\n}\n\nfunction getPheno(proband) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n    console.log(\"Get Pheno called: \" + proband)\n    return fetch(`${apiUrl}/proband/pheno?id=${proband.substring(1, proband.length-1)}`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            let text = result.map(({ text }) => text)\n            console.log(text.join(\" - \"))\n            return text.join(\" - \")\n        })\n}\nfunction getGenes(proband) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    return fetch(`${apiUrl}/proband/genes?id=${proband}`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            if (data) {\n                return data\n            }\n            return \"Error\";\n        });\n}\n\nexport const api = {\n    getProbands,\n    getProbandById,\n    getPheno,\n    getGenes\n};"]},"metadata":{},"sourceType":"module"}