{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nconst apiUrl = \"http://localhost:8002\";\nexport const userService = {\n  login,\n  logout,\n  getAll\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  console.log(requestOptions);\n  return fetch(`${apiUrl}/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`${apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/services/user.service.js"],"names":["authHeader","apiUrl","userService","login","logout","getAll","username","password","requestOptions","method","headers","body","JSON","stringify","console","log","fetch","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,SAASA,UAAT,QAA2B,wBAA3B;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHa,GAAvB;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ;AAEA,SAAOQ,KAAK,CAAE,GAAEf,MAAO,qBAAX,EAAiCO,cAAjC,CAAL,CACFS,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,QAAIA,IAAJ,EAAU;AACN;AACA;AACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYhB,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAgB,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BZ,IAAI,CAACC,SAAL,CAAeM,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAZE,CAAP;AAaH;;AAED,SAASf,MAAT,GAAkB;AACd;AACAmB,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASpB,MAAT,GAAkB;AACd,QAAMG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAEV,UAAU;AAFA,GAAvB;AAKA,SAAOgB,KAAK,CAAE,GAAEf,MAAO,QAAX,EAAoBO,cAApB,CAAL,CAAyCS,IAAzC,CAA8CC,cAA9C,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBQ,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAqBU,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIf,IAAI,CAACiB,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA3B,QAAAA,MAAM;AACNiB,QAAAA,MAAM,CAACW,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACH;;AAED,YAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAON,IAAP;AACH,GAdM,CAAP;AAeH","sourcesContent":["import { authHeader } from '../helpers/auth-header';\n\nconst apiUrl = \"http://localhost:8002\"\n\nexport const userService = {\n    login,\n    logout,\n    getAll\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n    console.log(requestOptions)\n\n    return fetch(`${apiUrl}/users/authenticate`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // login successful if there's a user in the response\n            if (user) {\n                // store user details and basic auth credentials in local storage \n                // to keep user logged in between page refreshes\n                user.authdata = window.btoa(username + ':' + password);\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`${apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                window.location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}