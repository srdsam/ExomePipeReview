{"ast":null,"code":"import _regeneratorRuntime from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export function parseVEP(_x){return _parseVEP.apply(this,arguments);}function _parseVEP(){_parseVEP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var results,consequence,scores,i,score,VEP,_VEP;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:results=[];consequence=[];if(data==undefined){results.push(\"Fetch failed or rejected by http://grch37.rest.ensembl.org/vep/\");}else if(data.error){results.push(data.error);}else if(data[0]){scores=data[0].transcript_consequences;consequence.push(data[0].most_severe_consequence);if(data[0].transcript_consequences){for(i=0;i<scores.length;i++){score=scores[i];VEP={exists:true,transcript_id:score.transcript_id,metaSVM:score.metasvm_score,metaSVM_prediction:score.metasvm_pred,sift_score:score.sift_score,sift_prediction:score.sift_prediction,polyphen_score:score.polyphen_score,polyphen_prediction:score.polyphen_prediction,cadd_raw:score.cadd_raw,polyphen2_hdiv_score:score.polyphen2_hdiv_score,metalr_score:score.metalr_score,metalr_prediction:score.metalr_pred,most_severe_consequence:score.most_severe_consequence};results.push(VEP);}}else{results.push(\"No variant pathogenecity scores/transcript consequences\");}}else{_VEP={exists:false};results.push(_VEP);}console.log(consequence);return _context.abrupt(\"return\",{results:results,consequence:consequence});case 5:case\"end\":return _context.stop();}}},_callee);}));return _parseVEP.apply(this,arguments);}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/vep-parser.js"],"names":["parseVEP","data","results","consequence","undefined","push","error","scores","transcript_consequences","most_severe_consequence","i","length","score","VEP","exists","transcript_id","metaSVM","metasvm_score","metaSVM_prediction","metasvm_pred","sift_score","sift_prediction","polyphen_score","polyphen_prediction","cadd_raw","polyphen2_hdiv_score","metalr_score","metalr_prediction","metalr_pred","console","log"],"mappings":"2WAAA,eAAsBA,CAAAA,QAAtB,6C,uFAAO,iBAAwBC,IAAxB,kKAECC,OAFD,CAEW,EAFX,CAGCC,WAHD,CAGe,EAHf,CAKH,GAAIF,IAAI,EAAIG,SAAZ,CAAuB,CAEnBF,OAAO,CAACG,IAAR,CAAa,iEAAb,EAEH,CAJD,IAIO,IAAIJ,IAAI,CAACK,KAAT,CAAgB,CAEnBJ,OAAO,CAACG,IAAR,CAAaJ,IAAI,CAACK,KAAlB,EAEH,CAJM,IAIA,IAAIL,IAAI,CAAC,CAAD,CAAR,CAAa,CACZM,MADY,CACHN,IAAI,CAAC,CAAD,CAAJ,CAAQO,uBADL,CAEhBL,WAAW,CAACE,IAAZ,CAAiBJ,IAAI,CAAC,CAAD,CAAJ,CAAQQ,uBAAzB,EAEA,GAAIR,IAAI,CAAC,CAAD,CAAJ,CAAQO,uBAAZ,CAAqC,CACjC,IAASE,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGH,MAAM,CAACI,MAA3B,CAAmCD,CAAC,EAApC,CAAuC,CAC/BE,KAD+B,CACvBL,MAAM,CAACG,CAAD,CADiB,CAG7BG,GAH6B,CAGvB,CACRC,MAAM,CAAE,IADA,CAERC,aAAa,CAAEH,KAAK,CAACG,aAFb,CAGRC,OAAO,CAAEJ,KAAK,CAACK,aAHP,CAIRC,kBAAkB,CAAEN,KAAK,CAACO,YAJlB,CAKRC,UAAU,CAAER,KAAK,CAACQ,UALV,CAMRC,eAAe,CAAET,KAAK,CAACS,eANf,CAORC,cAAc,CAAEV,KAAK,CAACU,cAPd,CAQRC,mBAAmB,CAAEX,KAAK,CAACW,mBARnB,CASRC,QAAQ,CAAEZ,KAAK,CAACY,QATR,CAURC,oBAAoB,CAAEb,KAAK,CAACa,oBAVpB,CAWRC,YAAY,CAAEd,KAAK,CAACc,YAXZ,CAYRC,iBAAiB,CAAEf,KAAK,CAACgB,WAZjB,CAaRnB,uBAAuB,CAAEG,KAAK,CAACH,uBAbvB,CAHuB,CAoBnCP,OAAO,CAACG,IAAR,CAAaQ,GAAb,EACH,CACJ,CAvBD,IAuBO,CAEHX,OAAO,CAACG,IAAR,CAAa,yDAAb,EACH,CAEJ,CAhCM,IAgCA,CACGQ,IADH,CACS,CACRC,MAAM,CAAE,KADA,CADT,CAIHZ,OAAO,CAACG,IAAR,CAAaQ,IAAb,EACH,CAEDgB,OAAO,CAACC,GAAR,CAAY3B,WAAZ,EApDG,gCAsDI,CAAED,OAAO,CAAPA,OAAF,CAAWC,WAAW,CAAXA,WAAX,CAtDJ,wD","sourcesContent":["export async function parseVEP(data) {\n\n    let results = []\n    let consequence = []\n\n    if (data == undefined) {\n\n        results.push(\"Fetch failed or rejected by http://grch37.rest.ensembl.org/vep/\")\n\n    } else if (data.error) {\n\n        results.push(data.error)\n\n    } else if (data[0]) {\n        let scores = data[0].transcript_consequences\n        consequence.push(data[0].most_severe_consequence)\n\n        if (data[0].transcript_consequences) {\n            for (var i = 0; i < scores.length; i++){\n                let score = scores[i]\n    \n                const VEP = {\n                    exists: true,\n                    transcript_id: score.transcript_id,\n                    metaSVM: score.metasvm_score,\n                    metaSVM_prediction: score.metasvm_pred,\n                    sift_score: score.sift_score,\n                    sift_prediction: score.sift_prediction,\n                    polyphen_score: score.polyphen_score,\n                    polyphen_prediction: score.polyphen_prediction,\n                    cadd_raw: score.cadd_raw,\n                    polyphen2_hdiv_score: score.polyphen2_hdiv_score,\n                    metalr_score: score.metalr_score,\n                    metalr_prediction: score.metalr_pred,\n                    most_severe_consequence: score.most_severe_consequence\n    \n                }\n    \n                results.push(VEP)\n            }\n        } else {\n\n            results.push(\"No variant pathogenecity scores/transcript consequences\")\n        }\n\n    } else {\n        const VEP = {\n            exists: false\n        }\n        results.push(VEP)\n    }\n\n    console.log(consequence)\n\n    return { results, consequence }\n}"]},"metadata":{},"sourceType":"module"}