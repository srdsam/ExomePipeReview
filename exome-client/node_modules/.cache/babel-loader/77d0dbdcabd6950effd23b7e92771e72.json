{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/samplePage/samplePage.jsx\";\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Select from 'react-select';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { Navibar } from '../component/Navibar';\nimport { Clinvar } from '../component/Clinvar';\nimport { api } from '../services/api.service';\nimport { parse } from '../helpers/exomiser-parser';\nimport { Vep } from '../component/Vep';\n\nclass SamplePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      users: [],\n      proband: {},\n      data: [],\n      genes: [],\n      showElem: [],\n      reviewStatus: [],\n      geneList: [],\n      ACMG: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      users: {\n        loading: true\n      },\n      proband: window.location.pathname.split(':')[1],\n      isLoading: true,\n      data: {\n        loading: true\n      },\n      genes: [],\n      showElem: [],\n      reviewStatus: [],\n      geneList: [],\n      ACMG: \"UNK\"\n    });\n    api.getProbandById(window.location.pathname.split(':')[1]).then(data => {\n      const {\n        genes,\n        raw\n      } = parse(data);\n      this.setState({\n        data: genes\n      });\n      this.setState({\n        isLoading: false\n      });\n    });\n    api.getGenes(window.location.pathname.split(':')[1]).then(data => {\n      this.setState({\n        genes: data\n      });\n      this.setState({\n        showElem: Array(data.length).fill(false)\n      });\n      this.setState({\n        reviewStatus: Array(data.length).fill(\"Incomplete\")\n      });\n    });\n  }\n\n  showGene(label, value) {\n    let tempArr = Array(this.state.showElem.length).fill(false);\n    tempArr[value] = true;\n    this.setState({\n      showElem: tempArr\n    });\n  }\n\n  updateReviewStatus(val, i) {\n    let tempArr = this.state.reviewStatus;\n    tempArr[i] = val;\n    this.setState({\n      reviewStatus: tempArr\n    });\n  }\n\n  updateGeneList(value, i, gene, proband) {\n    let tempArr = this.state.geneList;\n    let index = this.state.showElem.indexOf(true);\n    tempArr.push({\n      Family_ID: \"UNK\",\n      Individual_ID: \"UNK\",\n      Sample_ID: this.state.proband,\n      Gene: this.state.genes[index].text,\n      Ensembl_ID: value.transcriptAnnotations[0].accession,\n      Variant: `${value.chromosomeName}:${value.position}:${value.ref}:${value.alt}`,\n      Inheritance: value.contributingInheritanceModes.join(\", \"),\n      OMIM_Name: this.state.data[index].OMIM.map(val => val.diseaseName).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseName).join(\", \") : \"No Results\",\n      OMIM_ID: this.state.data[index].OMIM.map(val => val.diseaseId).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseId).join(\", \") : \"No Results\",\n      cDNA: value.transcriptAnnotations[0].hgvsCdna,\n      Protein: value.transcriptAnnotations[0].hgvsProtein,\n      ACMG: this.state.ACMG\n    });\n    console.log(tempArr);\n    this.setState({\n      geneList: tempArr\n    });\n  }\n\n  handleAcmgOnChange(e) {\n    this.setState({\n      ACMG: e.target.value\n    });\n  }\n\n  generateReport() {\n    const {\n      geneList,\n      proband\n    } = this.state;\n    console.log(\"Clicked\");\n    const data = geneList;\n    const fileName = \"GGC_\" + proband;\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const dataBlob = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(dataBlob, fileName + fileExtension);\n  }\n\n  render() {\n    const {\n      proband,\n      data,\n      isLoading,\n      genes,\n      showElem,\n      reviewStatus,\n      geneList,\n      ACMG\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navibar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.generateReport(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, \"Generate Report\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        fontSize: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, \"Proband - \", /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        fontSize: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 64\n      }\n    }, proband.toString()))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      defaultMenuIsOpen: true,\n      options: genes.map((val, index) => ({\n        label: val.text + \" [Review of Gene: \" + reviewStatus[index] + \"]\",\n        value: index\n      })),\n      onChange: opt => this.showGene(opt.label, opt.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      variant: \"primary\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, \"Loading...\")), !isLoading && data.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, showElem[index] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron jumbotron-fluid\",\n      key: genes[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 37\n      }\n    }, value.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 50\n      }\n    }, \"Inheritance of Gene:\"), value.compatibleInheritanceModes.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 54\n      }\n    }, value)))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 45\n      }\n    }), console.log(value), value.OMIM.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 54\n      }\n    }, \"OMIM Associated Diseases:\"), value.OMIM.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 57\n      }\n    }, value.diseaseName)))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }\n    }), value.HiPhive.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 54\n      }\n    }, \"HiPhive Results:\"), value.HiPhive.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        fontSize: \"12px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 57\n      }\n    }, \"Organism: \", value.model.organism), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 57\n      }\n    }, \"Model Score: \", value.score), value.model.diseaseTerm && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 61\n      }\n    }, \"Disease Term: \", value.model.diseaseTerm), value.bestModelPhenotypeMatches && value.bestModelPhenotypeMatches.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 65\n      }\n    }, \"Matched Phenotype: \", JSON.stringify(value.match.label)))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 45\n      }\n    }), value.variantEvaluations.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Vep, {\n      chromosome: value.chromosomeName,\n      hgsvG: value.transcriptAnnotations[0].hgvsGenomic,\n      hgsvC: value.transcriptAnnotations[0].hgvsCdna,\n      accession: value.transcriptAnnotations[0].accession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 45\n      }\n    }, \"Exomiser Scores:\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 45\n      }\n    }, \"Variant Score: \", value.variantScore), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 45\n      }\n    }, \"Priority Score: \", value.priorityScore), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 45\n      }\n    }, \"Combined Score: \", value.combinedScore), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Clinvar, {\n      geneID: genes[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 45\n      }\n    }, \"ACMG Intepretation to add to Report for Variant\", /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 53\n      }\n    }, \"ACMG: \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      class: \"form-control\",\n      placeholder: \"Username\",\n      \"aria-label\": \"Username\",\n      value: ACMG,\n      onChange: e => this.handleAcmgOnChange(e),\n      \"aria-describedby\": \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 41\n      }\n    }, \"Variants Analysis by Exomiser\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 53\n      }\n    }, \"Variant\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 53\n      }\n    }, \"Effect Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }, \"Variant Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 53\n      }\n    }, \"Phred Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 53\n      }\n    }, \"Frequency Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 53\n      }\n    }, \"Frequency Sources\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 53\n      }\n    }, \"Transcript Annotations\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 53\n      }\n    }, \"Pathogenecity Data\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 53\n      }\n    }, \"Add to Report\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 45\n      }\n    }, value.variantEvaluations.map((value, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        maxWidth: \"20px\",\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 53\n      }\n    }, value.chromosomeName, \":\", value.position, \":\", value.ref, \":\", value.alt), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 53\n      }\n    }, value.variantEffect), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    }, value.variantScore), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 53\n      }\n    }, value.phredScore), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 53\n      }\n    }, value.frequencyScore), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        maxWidth: \"200px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 53\n      }\n    }, value.frequencyData.knownFrequencies.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 57\n      }\n    }, value.source, \" : \", value.frequency))), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        columnSpan: \"50px\",\n        maxWidth: \"250px\",\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 53\n      }\n    }, value.transcriptAnnotations.map((value, index) => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 57\n      }\n    }, value.hgvsCdna, \": \", value.variantEffect, \" (\", value.accession, \") \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 121\n      }\n    })))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 53\n      }\n    }, value.pathogenicityData.clinVarData.empty && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 61\n      }\n    }, \"No Clinvar Results\"), !value.pathogenicityData.clinVarData.empty && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 61\n      }\n    }, \"Review Status: \", value.pathogenicityData.clinVarData.reviewStatus, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 65\n      }\n    }), \"Intepretation: \", value.pathogenicityData.clinVarData.primaryInterpretation), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 57\n      }\n    }), value.pathogenicityData.mostPathogenicScore && value.pathogenicityData.predictedPathogenicityScores.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 65\n      }\n    }, \"source: \", value.source, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 69\n      }\n    }), \"score: \", value.score))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.updateGeneList(value, index, value.transcriptAnnotations[0].geneSymbol),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 53\n      }\n    }, \"Add\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.updateReviewStatus(\"Complete\", index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 41\n      }\n    }, \"Gene Reviewed\")))))))));\n  }\n\n}\n\nexport { SamplePage };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/samplePage/samplePage.jsx"],"names":["React","Spinner","Table","Button","Select","FileSaver","XLSX","Navibar","Clinvar","api","parse","Vep","SamplePage","Component","constructor","props","state","user","users","proband","data","genes","showElem","reviewStatus","geneList","ACMG","componentDidMount","setState","JSON","localStorage","getItem","loading","window","location","pathname","split","isLoading","getProbandById","then","raw","getGenes","Array","length","fill","showGene","label","value","tempArr","updateReviewStatus","val","i","updateGeneList","gene","index","indexOf","push","Family_ID","Individual_ID","Sample_ID","Gene","text","Ensembl_ID","transcriptAnnotations","accession","Variant","chromosomeName","position","ref","alt","Inheritance","contributingInheritanceModes","join","OMIM_Name","OMIM","map","diseaseName","OMIM_ID","diseaseId","cDNA","hgvsCdna","Protein","hgvsProtein","console","log","handleAcmgOnChange","e","target","generateReport","fileName","fileType","fileExtension","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","dataBlob","Blob","saveAs","render","display","justifyContent","alignItems","fontSize","toString","opt","name","compatibleInheritanceModes","HiPhive","model","organism","score","diseaseTerm","bestModelPhenotypeMatches","stringify","match","variantEvaluations","hgvsGenomic","textAlign","variantScore","priorityScore","combinedScore","maxWidth","wordWrap","variantEffect","phredScore","frequencyScore","frequencyData","knownFrequencies","source","frequency","columnSpan","pathogenicityData","clinVarData","empty","primaryInterpretation","mostPathogenicScore","predictedPathogenicityScores","geneSymbol"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\n\nimport Select from 'react-select';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nimport { Navibar } from '../component/Navibar';\nimport { Clinvar } from '../component/Clinvar'\n\nimport { api } from '../services/api.service';\nimport { parse } from '../helpers/exomiser-parser';\nimport { Vep } from '../component/Vep';\n\nclass SamplePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n            users: [],\n            proband: {},\n            data: [],\n            genes: [],\n            showElem: [],\n            reviewStatus: [],\n            geneList: [],\n            ACMG: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            users: { loading: true },\n            proband: window.location.pathname.split(':')[1],\n            isLoading: true,\n            data: { loading: true },\n            genes: [],\n            showElem: [],\n            reviewStatus: [],\n            geneList: [],\n            ACMG: \"UNK\"\n        });\n\n        api.getProbandById(window.location.pathname.split(':')[1]).then(data => {\n            const { genes, raw } = parse(data);\n            this.setState({ data: genes })\n            this.setState({ isLoading: false})\n        })\n\n        api.getGenes(window.location.pathname.split(':')[1]).then(data => {\n            this.setState({ genes: data})\n            this.setState({ showElem: Array(data.length).fill(false) })\n            this.setState({ reviewStatus: Array(data.length).fill(\"Incomplete\") })\n        })\n\n    }\n\n    showGene(label, value) {\n        let tempArr = Array(this.state.showElem.length).fill(false)\n\n        tempArr[value] = true\n\n        this.setState({ showElem: tempArr })\n\n    }\n\n    updateReviewStatus(val, i) {\n        let tempArr = this.state.reviewStatus\n\n        tempArr[i] = val\n\n        this.setState({ reviewStatus: tempArr })\n    }\n\n    updateGeneList(value, i, gene, proband) {\n        let tempArr = this.state.geneList\n\n        let index = this.state.showElem.indexOf(true)\n\n        tempArr.push({\n            Family_ID: \"UNK\",\n            Individual_ID: \"UNK\",\n            Sample_ID: this.state.proband,\n            Gene: this.state.genes[index].text,\n            Ensembl_ID: value.transcriptAnnotations[0].accession,\n            Variant: `${value.chromosomeName}:${value.position}:${value.ref}:${value.alt}`,\n            Inheritance: value.contributingInheritanceModes.join(\", \"),\n            OMIM_Name: this.state.data[index].OMIM.map(val => val.diseaseName).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseName).join(\", \") : \"No Results\",\n            OMIM_ID: this.state.data[index].OMIM.map(val => val.diseaseId).length > 0 ? this.state.data[index].OMIM.map(val => val.diseaseId).join(\", \") : \"No Results\",\n            cDNA: value.transcriptAnnotations[0].hgvsCdna,\n            Protein: value.transcriptAnnotations[0].hgvsProtein,\n            ACMG: this.state.ACMG,\n        })\n\n        console.log(tempArr)\n\n        this.setState({ geneList: tempArr })\n    }\n\n    handleAcmgOnChange(e) {\n        this.setState({\n          ACMG: e.target.value\n        });\n      }\n\n    generateReport() {\n        const { geneList, proband } = this.state\n\n        console.log(\"Clicked\")\n\n        const data = geneList\n        const fileName = \"GGC_\" + proband\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const dataBlob = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(dataBlob, fileName + fileExtension);\n    }\n\n    render() {\n        const { proband, data, isLoading, genes, showElem, reviewStatus, geneList, ACMG } = this.state;\n\n        return (\n\n            <div>\n\n                <Navibar></Navibar>\n\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n                <Button onClick={(e) => this.generateReport()}>\n                    Generate Report\n                </Button>\n                </div>\n\n                <div>\n                    <h1 style={{ fontSize: \"50px\" }}>Proband - <i style={{ fontSize: \"50px\" }}>{proband.toString()}</i></h1>\n                </div>\n\n                <br></br>\n                <Select defaultMenuIsOpen={true} options={genes.map((val, index) => ({ label: val.text + \" [Review of Gene: \" + reviewStatus[index] + \"]\", value: index }))} onChange={opt => this.showGene(opt.label, opt.value)}/>\n                <br></br>\n                {isLoading && \n                    <Spinner animation=\"border\" role=\"status\" variant=\"primary\" size=\"lg\">\n                    <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                }\n                {!isLoading &&\n                    data.map((value, index) => (\n                        <div>\n                            {showElem[index] &&\n                            <div className=\"jumbotron jumbotron-fluid\" key={genes[index]}>\n                                <div className=\"container\">\n                                    <h1>{value.name}</h1>\n                                    <div className=\"row\">\n                                        <div className='col-md-8'>\n                                            <div><h2>Inheritance of Gene:</h2>{value.compatibleInheritanceModes.map((value, index) => (\n                                                <div><li>{value}</li></div>\n                                            ))}</div>\n                                            <br></br>\n\n                                            {console.log(value)}\n\n                                            {value.OMIM.length>0 &&\n\n                                                <div><h2>OMIM Associated Diseases:</h2>{value.OMIM.map((value, index) => (\n                                                    <div>\n                                                        <li>{value.diseaseName}</li>\n                                                    </div>\n                                                ))}</div>\n                                            }\n                                            <br></br>\n                                            {value.HiPhive.length>0 &&\n                                                <div><h2>HiPhive Results:</h2>{value.HiPhive.map((value, index) => (\n                                                    <div>\n                                                        <h3 style={{ fontSize: \"12px\"}}>Organism: {value.model.organism}</h3>\n                                                        <div>Model Score: {value.score}</div>\n                                                        {value.model.diseaseTerm &&\n                                                            <div>\n                                                                Disease Term: {value.model.diseaseTerm}\n                                                            </div>\n                                                                }\n                                                        {value.bestModelPhenotypeMatches &&\n                                                            value.bestModelPhenotypeMatches.map((value, index) => (\n                                                                <div>\n                                                                    Matched Phenotype: {JSON.stringify(value.match.label)}\n                                                                </div>\n                                                            ))}\n                                                    </div>\n                                                ))}</div>}\n                                            <br></br>\n                                            {value.variantEvaluations.map((value, index) => (\n                                                <div>\n                                                    <Vep chromosome={value.chromosomeName} hgsvG={value.transcriptAnnotations[0].hgvsGenomic} hgsvC={value.transcriptAnnotations[0].hgvsCdna} accession={value.transcriptAnnotations[0].accession} />\n                                                    <br></br>\n                                                </div>\n                                            ))}\n                                        </div>\n                                        <div className='col-md-4'>\n                                            <h2>Exomiser Scores:</h2>\n                                            <p style={{ textAlign: \"left\" }}>Variant Score: {value.variantScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Priority Score: {value.priorityScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Combined Score: {value.combinedScore}</p> \n                                            <br></br>\n                                            <Clinvar geneID={genes[index]}/>\n                                            <br></br>\n                                            <div>\n                                                ACMG Intepretation to add to Report for Variant\n                                            <div class=\"input-group mb-3\">\n                                                <div class=\"input-group-prepend\">\n                                                    <span class=\"input-group-text\" id=\"basic-addon1\">ACMG: </span>\n                                                </div>\n                                                    <input type=\"text\" class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" value={ACMG} onChange={ (e) => this.handleAcmgOnChange(e) } aria-describedby=\"basic-addon1\"></input>\n                                            </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\"> \n                                    <div className='col-md-12'>\n                                        <h2>Variants Analysis by Exomiser</h2>\n                                        <Table striped bordered hover variant=\"dark\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Variant</th>\n                                                    <th>Effect Type</th>\n                                                    <th>Variant Score</th>\n                                                    <th>Phred Score</th>\n                                                    <th>Frequency Score</th>\n                                                    <th>Frequency Sources</th>\n                                                    <th>Transcript Annotations</th>\n                                                    <th>Pathogenecity Data</th>\n                                                    <th>Add to Report</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {value.variantEvaluations.map((value, index) => (\n                                                <tr>\n                                                    <td style={{ maxWidth: \"20px\", wordWrap: \"break-word\" }}>{value.chromosomeName}:{value.position}:{value.ref}:{value.alt}</td>\n                                                    <td>{value.variantEffect}</td>\n                                                    <td>{value.variantScore}</td>\n                                                    <td>{value.phredScore}</td>\n                                                    <td>{value.frequencyScore}</td>\n                                                    <td style={{ maxWidth: \"200px\"}}>{value.frequencyData.knownFrequencies.map((value, index) => (\n                                                        <div>{value.source} : {value.frequency}</div>\n                                                    ))}</td>\n                                                    <td style={{ columnSpan: \"50px\", maxWidth: \"250px\", wordWrap: \"break-word\"}}>{value.transcriptAnnotations.map((value, index) => (\n                                                        <li>\n                                                            {value.hgvsCdna}: {value.variantEffect} ({value.accession}) <br></br>\n                                                        </li>\n                                                    ))}</td>\n                                                    <td>\n                                                        {value.pathogenicityData.clinVarData.empty &&\n                                                            <div>No Clinvar Results</div>\n                                                        }\n                                                        {!value.pathogenicityData.clinVarData.empty &&\n                                                            <div>\n                                                                Review Status: {value.pathogenicityData.clinVarData.reviewStatus}\n                                                                <br></br>\n                                                                Intepretation: {value.pathogenicityData.clinVarData.primaryInterpretation}\n                                                            </div>\n                                                        }\n                                                        <br></br>\n                                                        {value.pathogenicityData.mostPathogenicScore &&\n                                                            value.pathogenicityData.predictedPathogenicityScores.map((value, index) => (\n                                                                <div>\n                                                                    source: {value.source}\n                                                                    <br></br>\n                                                                    score: {value.score}\n                                                                </div>\n                                                            ))}                                                    \n                                                        \n                                                    </td>\n                                                    <td>\n                                                    <Button onClick={(e) => this.updateGeneList(value, index, value.transcriptAnnotations[0].geneSymbol)}>\n                                                        Add\n                                                    </Button>\n                                                    </td>\n\n                                                </tr>\n                                                ))}\n                                            </tbody>\n                                        </Table>\n                                        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n                                        <Button onClick={(e) => this.updateReviewStatus(\"Complete\", index)}>\n                                            Gene Reviewed\n                                        </Button>\n                                        </div>\n                                    </div>\n                                    </div>\n                                </div>\n                            </div>\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport { SamplePage };\n"]},"metadata":{},"sourceType":"module"}