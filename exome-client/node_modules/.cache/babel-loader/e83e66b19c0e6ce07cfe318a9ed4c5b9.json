{"ast":null,"code":"export async function parseVEP(data) {\n  let results = [];\n\n  if (data.error) {\n    results.push(data.error);\n  } else if (data[0]) {\n    let scores = data[0].transcript_consequences;\n\n    for (var i = 0; i < scores.length; i++) {\n      let score = scores[i];\n      const VEP = {\n        exists: true,\n        metaSVM: score.metasvm_score,\n        MetaSVM_pred: score.metasvm_score,\n        sift_score: score.metasvm_prediction,\n        sift_prediction: score.sift_prediction,\n        polyphen_score: score.polyphen_score,\n        polyphen_prediction: score.polyphen_prediction,\n        cadd_raw: score.cadd_raw,\n        polyphen2_hdiv_score: score.polyphen2_hdiv_score,\n        metalr_score: score.metalr_score\n      };\n      results.push(VEP);\n    }\n  } else {\n    const VEP = {\n      exists: false\n    };\n    results.push(VEP);\n  }\n\n  console.log(results);\n  return {\n    results\n  };\n}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/vep-parser.js"],"names":["parseVEP","data","results","error","push","scores","transcript_consequences","i","length","score","VEP","exists","metaSVM","metasvm_score","MetaSVM_pred","sift_score","metasvm_prediction","sift_prediction","polyphen_score","polyphen_prediction","cadd_raw","polyphen2_hdiv_score","metalr_score","console","log"],"mappings":"AAAA,OAAO,eAAeA,QAAf,CAAwBC,IAAxB,EAA8B;AAEjC,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAID,IAAI,CAACE,KAAT,EAAgB;AAEZD,IAAAA,OAAO,CAACE,IAAR,CAAaH,IAAI,CAACE,KAAlB;AAEH,GAJD,MAIO,IAAIF,IAAI,CAAC,CAAD,CAAR,EAAa;AAChB,QAAII,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,uBAArB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnC,UAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AAEA,YAAMG,GAAG,GAAG;AACRC,QAAAA,MAAM,EAAE,IADA;AAERC,QAAAA,OAAO,EAAEH,KAAK,CAACI,aAFP;AAGRC,QAAAA,YAAY,EAAEL,KAAK,CAACI,aAHZ;AAIRE,QAAAA,UAAU,EAAEN,KAAK,CAACO,kBAJV;AAKRC,QAAAA,eAAe,EAAER,KAAK,CAACQ,eALf;AAMRC,QAAAA,cAAc,EAAET,KAAK,CAACS,cANd;AAORC,QAAAA,mBAAmB,EAAEV,KAAK,CAACU,mBAPnB;AAQRC,QAAAA,QAAQ,EAAEX,KAAK,CAACW,QARR;AASRC,QAAAA,oBAAoB,EAAEZ,KAAK,CAACY,oBATpB;AAURC,QAAAA,YAAY,EAAEb,KAAK,CAACa;AAVZ,OAAZ;AAaApB,MAAAA,OAAO,CAACE,IAAR,CAAaM,GAAb;AACH;AAEJ,GAtBM,MAsBA;AACH,UAAMA,GAAG,GAAG;AACRC,MAAAA,MAAM,EAAE;AADA,KAAZ;AAGAT,IAAAA,OAAO,CAACE,IAAR,CAAaM,GAAb;AACH;;AAEDa,EAAAA,OAAO,CAACC,GAAR,CAAYtB,OAAZ;AAEA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH","sourcesContent":["export async function parseVEP(data) {\n\n    let results = []\n\n    if (data.error) {\n\n        results.push(data.error)\n\n    } else if (data[0]) {\n        let scores = data[0].transcript_consequences\n\n        for (var i = 0; i < scores.length; i++){\n            let score = scores[i]\n\n            const VEP = {\n                exists: true,\n                metaSVM: score.metasvm_score,\n                MetaSVM_pred: score.metasvm_score,\n                sift_score: score.metasvm_prediction,\n                sift_prediction: score.sift_prediction,\n                polyphen_score: score.polyphen_score,\n                polyphen_prediction: score.polyphen_prediction,\n                cadd_raw: score.cadd_raw,\n                polyphen2_hdiv_score: score.polyphen2_hdiv_score,\n                metalr_score: score.metalr_score,\n            }\n\n            results.push(VEP)\n        }\n\n    } else {\n        const VEP = {\n            exists: false\n        }\n        results.push(VEP)\n    }\n\n    console.log(results)\n\n    return { results }\n}"]},"metadata":{},"sourceType":"module"}