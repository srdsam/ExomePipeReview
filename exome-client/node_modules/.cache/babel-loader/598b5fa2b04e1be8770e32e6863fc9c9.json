{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx\";\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nclass genReport extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user'))\n    });\n    this.generateReport = this.generateReport.bind(this);\n  }\n\n  generateReport(data, fileName) {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    const generateReport = (data, fileName) => {\n      const ws = XLSX.utils.json_to_sheet(data);\n      const wb = {\n        Sheets: {\n          'data': ws\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const dataBlob = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(dataBlob, fileName + fileExtension);\n    };\n  }\n\n  render() {\n    const {\n      data,\n      fileName\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.generateReport(data, fileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, \"Generate Report 2\"));\n  }\n\n}\n\nexport { genReport };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx"],"names":["React","Component","Button","FileSaver","XLSX","genReport","constructor","props","state","user","componentDidMount","setState","JSON","parse","localStorage","getItem","generateReport","bind","data","fileName","fileType","fileExtension","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","dataBlob","Blob","saveAs","render","display","justifyContent","alignItems","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAE9BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AACVF,MAAAA,IAAI,EAAEG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;AADI,KAAd;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AAEDD,EAAAA,cAAc,CAACE,IAAD,EAAOC,QAAP,EAAiB;AAC3B,UAAMC,QAAQ,GAAG,iFAAjB;AACA,UAAMC,aAAa,GAAG,OAAtB;;AAEA,UAAML,cAAc,GAAG,CAACE,IAAD,EAAOC,QAAP,KAAoB;AACvC,YAAMG,EAAE,GAAGlB,IAAI,CAACmB,KAAL,CAAWC,aAAX,CAAyBN,IAAzB,CAAX;AACA,YAAMO,EAAE,GAAG;AAAEC,QAAAA,MAAM,EAAE;AAAE,kBAAQJ;AAAV,SAAV;AAA0BK,QAAAA,UAAU,EAAE,CAAC,MAAD;AAAtC,OAAX;AACA,YAAMC,WAAW,GAAGxB,IAAI,CAACyB,KAAL,CAAWJ,EAAX,EAAe;AAAEK,QAAAA,QAAQ,EAAE,MAAZ;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAf,CAApB;AACA,YAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAACL,WAAD,CAAT,EAAwB;AAACG,QAAAA,IAAI,EAAEX;AAAP,OAAxB,CAAjB;AACAjB,MAAAA,SAAS,CAAC+B,MAAV,CAAiBF,QAAjB,EAA2Bb,QAAQ,GAAGE,aAAtC;AACH,KAND;AAOH;;AAEDc,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEjB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAqB,KAAKZ,KAAhC;AAEJ,wBACI;AAAK,MAAA,KAAK,EAAE;AAAC6B,QAAAA,OAAO,EAAE,MAAV;AAAmBC,QAAAA,cAAc,EAAC,QAAlC;AAA4CC,QAAAA,UAAU,EAAC;AAAvD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAO,KAAKvB,cAAL,CAAoBE,IAApB,EAA0BC,QAA1B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADJ;AAOC;;AA1C6B;;AA6ClC,SAASd,SAAT","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nclass genReport extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n        });\n\n        this.generateReport = this.generateReport.bind(this);\n    }\n\n    generateReport(data, fileName) {\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n    \n        const generateReport = (data, fileName) => {\n            const ws = XLSX.utils.json_to_sheet(data);\n            const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n            const dataBlob = new Blob([excelBuffer], {type: fileType});\n            FileSaver.saveAs(dataBlob, fileName + fileExtension);\n        }\n    }\n    \n    render() {\n        const { data, fileName } = this.props;\n\n    return (\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n            <Button onClick={(e) => this.generateReport(data, fileName)}>\n                Generate Report 2\n            </Button>\n        </div>\n    );\n    }\n}\n\nexport { genReport };\n\n"]},"metadata":{},"sourceType":"module"}