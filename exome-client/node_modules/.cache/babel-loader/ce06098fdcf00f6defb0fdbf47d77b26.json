{"ast":null,"code":"import _regeneratorRuntime from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var apiUrl=\"http://grch37.rest.ensembl.org/vep/homo_sapiens/hgvs\";function getPathogenicity(_x,_x2,_x3){return _getPathogenicity.apply(this,arguments);}function _getPathogenicity(){_getPathogenicity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(chromosome,hgsvG,accession){var myHeaders,requestOptions,columns;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:myHeaders=new Headers();myHeaders.append(\"Content-Type\",\"application/json\");requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};columns=\"dbNSFP=CADD_raw,Polyphen2_HDIV_score,SIFT_score,MetaSVM_score,MetaLR_score,MetaSVM_pred,MetaLR_pred\";return _context.abrupt(\"return\",fetch(\"\".concat(apiUrl,\"/\").concat(accession,\":\").concat(hgsvG,\"/?\").concat(columns),requestOptions).then(function(response){return response.json();}).then(function(result){return result;}).catch(function(error){console.log(error);}));case 5:case\"end\":return _context.stop();}}},_callee);}));return _getPathogenicity.apply(this,arguments);}export var patho={getPathogenicity:getPathogenicity};","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/services/vep.service.js"],"names":["apiUrl","getPathogenicity","chromosome","hgsvG","accession","myHeaders","Headers","append","requestOptions","method","headers","redirect","columns","fetch","then","response","json","result","catch","error","console","log","patho"],"mappings":"2WAAA,GAAMA,CAAAA,MAAM,CAAG,sDAAf,C,QAEeC,CAAAA,gB,oKAAf,iBAAgCC,UAAhC,CAA4CC,KAA5C,CAAmDC,SAAnD,uJACQC,SADR,CACoB,GAAIC,CAAAA,OAAJ,EADpB,CAEID,SAAS,CAACE,MAAV,CAAiB,cAAjB,CAAiC,kBAAjC,EAEIC,cAJR,CAIyB,CACnBC,MAAM,CAAE,KADW,CAEnBC,OAAO,CAAEL,SAFU,CAGnBM,QAAQ,CAAE,QAHS,CAJzB,CAUUC,OAVV,CAUoB,qGAVpB,iCAYWC,KAAK,WAAIb,MAAJ,aAAcI,SAAd,aAA2BD,KAA3B,cAAqCS,OAArC,EAAgDJ,cAAhD,CAAL,CACFM,IADE,CACG,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADX,EAEFF,IAFE,CAEG,SAAAG,MAAM,CAAI,CACZ,MAAOA,CAAAA,MAAP,CACH,CAJE,EAIAC,KAJA,CAIM,SAACC,KAAD,CAAW,CAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CANE,CAZX,wD,mDAqBA,MAAO,IAAMG,CAAAA,KAAK,CAAG,CACjBrB,gBAAgB,CAAhBA,gBADiB,CAAd","sourcesContent":["const apiUrl = \"http://grch37.rest.ensembl.org/vep/homo_sapiens/hgvs\"\n\nasync function getPathogenicity(chromosome, hgsvG, accession) {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    \n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n\n    const columns = \"dbNSFP=CADD_raw,Polyphen2_HDIV_score,SIFT_score,MetaSVM_score,MetaLR_score,MetaSVM_pred,MetaLR_pred\"\n\n    return fetch(`${apiUrl}/${accession}:${hgsvG}/?${columns}`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            return result\n        }).catch((error) => {\n            console.log(error)\n        })\n}\n\nexport const patho = {\n    getPathogenicity\n};"]},"metadata":{},"sourceType":"module"}