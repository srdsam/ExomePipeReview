{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/samplePage/samplePage.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Button from 'react-bootstrap/Button';\nimport Select from 'react-select';\nimport { Navibar } from '../component/Navibar';\nimport { Clinvar } from '../component/Clinvar';\nimport { api } from '../services/api.service';\nimport { clinvar } from '../services/clinvar.service';\nimport { userService } from '../services/user.service';\nimport { parse } from '../helpers/exomiser-parser';\nimport { Vep } from '../component/Vep';\n\nclass SamplePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      users: [],\n      proband: {},\n      data: [],\n      genes: [],\n      showElem: [],\n      reviewStatus: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      users: {\n        loading: true\n      },\n      proband: window.location.pathname.split(':')[1],\n      isLoading: true,\n      data: {\n        loading: true\n      },\n      genes: [],\n      showElem: [],\n      reviewStatus: []\n    });\n    api.getProbandById(window.location.pathname.split(':')[1]).then(data => {\n      const {\n        genes,\n        raw\n      } = parse(data);\n      this.setState({\n        data: genes\n      });\n      this.setState({\n        isLoading: false\n      });\n    });\n    api.getGenes(window.location.pathname.split(':')[1]).then(data => {\n      this.setState({\n        genes: data\n      });\n      this.setState({\n        showElem: Array(data.length).fill(false)\n      });\n      this.setState({\n        reviewStatus: Array(data.length).fill(false)\n      });\n    });\n  }\n\n  showGene(label, value) {\n    let tempArr = Array(this.state.showElem.length).fill(false);\n    tempArr[value] = true;\n    this.setState({\n      showElem: tempArr\n    });\n  }\n\n  updateReviewStatus(val, i) {\n    console.log(e);\n  }\n\n  render() {\n    const {\n      proband,\n      data,\n      isLoading,\n      genes,\n      showElem,\n      reviewStatus\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navibar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        fontSize: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Proband - \", /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        fontSize: \"50px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 64\n      }\n    }, proband.toString()))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      defaultMenuIsOpen: true,\n      options: genes.map((val, index) => ({\n        label: val.text + \" [Review Status: \" + reviewStatus[index] + \"]\",\n        value: index\n      })),\n      onChange: opt => this.showGene(opt.label, opt.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      variant: \"primary\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, \"Loading...\")), !isLoading && data.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, showElem[index] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron jumbotron-fluid\",\n      key: genes[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 37\n      }\n    }, value.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 50\n      }\n    }, \"Inheritance of Gene:\"), value.compatibleInheritanceModes.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 54\n      }\n    }, value)))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 45\n      }\n    }), value.OMIM.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 54\n      }\n    }, \"OMIM Associated Diseases:\"), value.OMIM.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 57\n      }\n    }, value.diseaseName)))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 45\n      }\n    }), value.HiPhive.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 54\n      }\n    }, \"HiPhive Results:\"), value.HiPhive.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        fontSize: \"12px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 57\n      }\n    }, \"Organism: \", value.model.organism), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 57\n      }\n    }, \"Model Score: \", value.score), value.model.diseaseTerm && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 61\n      }\n    }, \"Disease Term: \", value.model.diseaseTerm), value.bestModelPhenotypeMatches && value.bestModelPhenotypeMatches.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 65\n      }\n    }, \"Matched Phenotype: \", JSON.stringify(value.match.label)))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 45\n      }\n    }), value.variantEvaluations.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Vep, {\n      chromosome: value.chromosomeName,\n      hgsvG: value.transcriptAnnotations[0].hgvsGenomic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 45\n      }\n    }, \"Exomiser Scores:\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 45\n      }\n    }, \"Variant Score: \", value.variantScore), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 45\n      }\n    }, \"Priority Score: \", value.priorityScore), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 45\n      }\n    }, \"Combined Score: \", value.combinedScore), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Clinvar, {\n      geneID: genes[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }, \"Variants\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 53\n      }\n    }, \"Variant\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 53\n      }\n    }, \"Effect Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 53\n      }\n    }, \"Variant Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 53\n      }\n    }, \"Phred Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 53\n      }\n    }, \"Frequency Score\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 53\n      }\n    }, \"Frequency Sources\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 53\n      }\n    }, \"Transcript Annotations\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 45\n      }\n    }, value.variantEvaluations.map((value, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        maxWidth: \"20px\",\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 53\n      }\n    }, value.chromosomeName, \":\", value.position, \":\", value.ref, \":\", value.alt), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 53\n      }\n    }, value.variantEffect), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 53\n      }\n    }, value.variantScore), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 53\n      }\n    }, value.phredScore), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 53\n      }\n    }, value.frequencyScore), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        maxWidth: \"200px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 53\n      }\n    }, value.frequencyData.knownFrequencies.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 57\n      }\n    }, value.source, \" : \", value.frequency))), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        columnSpan: \"50px\",\n        maxWidth: \"250px\",\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 53\n      }\n    }, value.transcriptAnnotations.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 57\n      }\n    }, \"- \", value.hgvsCdna, \"; \", value.variantEffect, \"; \", value.accession, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 122\n      }\n    })))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.updateReviewStatus(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 41\n      }\n    }, \"Review Completed\")))))))));\n  }\n\n}\n\nexport { SamplePage };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/samplePage/samplePage.jsx"],"names":["React","Link","Spinner","Table","Dropdown","DropdownButton","ButtonGroup","ToggleButton","Button","Select","Navibar","Clinvar","api","clinvar","userService","parse","Vep","SamplePage","Component","constructor","props","state","user","users","proband","data","genes","showElem","reviewStatus","componentDidMount","setState","JSON","localStorage","getItem","loading","window","location","pathname","split","isLoading","getProbandById","then","raw","getGenes","Array","length","fill","showGene","label","value","tempArr","updateReviewStatus","val","i","console","log","e","render","fontSize","toString","map","index","text","opt","name","compatibleInheritanceModes","OMIM","diseaseName","HiPhive","model","organism","score","diseaseTerm","bestModelPhenotypeMatches","stringify","match","variantEvaluations","chromosomeName","transcriptAnnotations","hgvsGenomic","textAlign","variantScore","priorityScore","combinedScore","maxWidth","wordWrap","position","ref","alt","variantEffect","phredScore","frequencyScore","frequencyData","knownFrequencies","source","frequency","columnSpan","hgvsCdna","accession"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Button from 'react-bootstrap/Button'\n\nimport Select from 'react-select';\n\nimport { Navibar } from '../component/Navibar';\nimport { Clinvar } from '../component/Clinvar'\n\nimport { api } from '../services/api.service';\nimport { clinvar } from '../services/clinvar.service';\nimport { userService } from '../services/user.service';\nimport { parse } from '../helpers/exomiser-parser';\nimport { Vep } from '../component/Vep';\n\nclass SamplePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n            users: [],\n            proband: {},\n            data: [],\n            genes: [],\n            showElem: [],\n            reviewStatus: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            users: { loading: true },\n            proband: window.location.pathname.split(':')[1],\n            isLoading: true,\n            data: { loading: true },\n            genes: [],\n            showElem: [],\n            reviewStatus: []\n        });\n\n        api.getProbandById(window.location.pathname.split(':')[1]).then(data => {\n            const { genes, raw } = parse(data);\n            this.setState({ data: genes })\n            this.setState({ isLoading: false})\n        })\n\n        api.getGenes(window.location.pathname.split(':')[1]).then(data => {\n            this.setState({ genes: data})\n            this.setState({ showElem: Array(data.length).fill(false) })\n            this.setState({ reviewStatus: Array(data.length).fill(false) })\n        })\n\n    }\n\n    showGene(label, value) {\n        let tempArr = Array(this.state.showElem.length).fill(false)\n\n        tempArr[value] = true\n\n        this.setState({ showElem: tempArr })\n\n    }\n\n    updateReviewStatus(val, i) {\n        console.log(e)\n    }\n\n    render() {\n        const { proband, data, isLoading, genes, showElem, reviewStatus } = this.state;\n\n        return (\n\n            <div>\n\n                <Navibar></Navibar>\n                <div>\n                    <h1 style={{ fontSize: \"50px\" }}>Proband - <i style={{ fontSize: \"50px\" }}>{proband.toString()}</i></h1>\n                </div>\n                <br></br>\n                <Select defaultMenuIsOpen={true} options={genes.map((val, index) => ({ label: val.text + \" [Review Status: \" + reviewStatus[index] + \"]\", value: index }))} onChange={opt => this.showGene(opt.label, opt.value)}/>\n                <br></br>\n                {isLoading && \n                    <Spinner animation=\"border\" role=\"status\" variant=\"primary\" size=\"lg\">\n                    <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                }\n                {!isLoading &&\n                    data.map((value, index) => (\n                        <div>\n                            {showElem[index] &&\n                            <div className=\"jumbotron jumbotron-fluid\" key={genes[index]}>\n                                <div className=\"container\">\n                                    <h1>{value.name}</h1>\n                                    <div className=\"row\">\n                                        <div className='col-md-8'>\n                                            <div><h2>Inheritance of Gene:</h2>{value.compatibleInheritanceModes.map((value, index) => (\n                                                <div><li>{value}</li></div>\n                                            ))}</div>\n                                            <br></br>\n\n                                            {value.OMIM.length>0 &&\n\n                                                <div><h2>OMIM Associated Diseases:</h2>{value.OMIM.map((value, index) => (\n                                                    <div>\n                                                        <li>{value.diseaseName}</li>\n                                                    </div>\n                                                ))}</div>\n                                            }\n                                            <br></br>\n                                            {value.HiPhive.length>0 &&\n                                                <div><h2>HiPhive Results:</h2>{value.HiPhive.map((value, index) => (\n                                                    <div>\n                                                        <h3 style={{ fontSize: \"12px\"}}>Organism: {value.model.organism}</h3>\n                                                        <div>Model Score: {value.score}</div>\n                                                        {value.model.diseaseTerm &&\n                                                            <div>\n                                                                Disease Term: {value.model.diseaseTerm}\n                                                            </div>\n                                                                }\n                                                        {value.bestModelPhenotypeMatches &&\n                                                            value.bestModelPhenotypeMatches.map((value, index) => (\n                                                                <div>\n                                                                    Matched Phenotype: {JSON.stringify(value.match.label)}\n                                                                </div>\n                                                            ))}\n                                                    </div>\n                                                ))}</div>}\n                                            <br></br>\n                                            {value.variantEvaluations.map((value, index) => (\n                                                <div>\n                                                    <Vep chromosome={value.chromosomeName} hgsvG={value.transcriptAnnotations[0].hgvsGenomic} />\n                                                    <br></br>\n                                                </div>\n                                            ))}\n                                        </div>\n                                        <div className='col-md-4'>\n                                            <h2>Exomiser Scores:</h2>\n                                            <p style={{ textAlign: \"left\" }}>Variant Score: {value.variantScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Priority Score: {value.priorityScore}</p>\n                                            <p style={{ textAlign: \"left\" }}>Combined Score: {value.combinedScore}</p> \n                                            <br></br>\n                                            <Clinvar geneID={genes[index]}/>                                   \n                                        </div>\n                                    </div>\n                                    <div className=\"row\"> \n                                    <div className='col-md-12'>\n                                        <h2>Variants</h2>\n                                        <Table striped bordered hover variant=\"dark\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Variant</th>\n                                                    <th>Effect Type</th>\n                                                    <th>Variant Score</th>\n                                                    <th>Phred Score</th>\n                                                    <th>Frequency Score</th>\n                                                    <th>Frequency Sources</th>\n                                                    <th>Transcript Annotations</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {value.variantEvaluations.map((value, index) => (\n                                                <tr>\n                                                    <td style={{ maxWidth: \"20px\", wordWrap: \"break-word\" }}>{value.chromosomeName}:{value.position}:{value.ref}:{value.alt}</td>\n                                                    <td>{value.variantEffect}</td>\n                                                    <td>{value.variantScore}</td>\n                                                    <td>{value.phredScore}</td>\n                                                    <td>{value.frequencyScore}</td>\n                                                    <td style={{ maxWidth: \"200px\"}}>{value.frequencyData.knownFrequencies.map((value, index) => (\n                                                        <div>{value.source} : {value.frequency}</div>\n                                                    ))}</td>\n                                                    <td style={{ columnSpan: \"50px\", maxWidth: \"250px\", wordWrap: \"break-word\"}}>{value.transcriptAnnotations.map((value, index) => (\n                                                        <div>\n                                                            - {value.hgvsCdna}; {value.variantEffect}; {value.accession} <br></br>\n                                                        </div>\n                                                    ))}</td>\n\n                                                </tr>\n                                                ))}\n                                            </tbody>\n                                        </Table>\n                                        <div>\n                                        <Button onClick={(e) => this.updateReviewStatus(e)}>\n                                            Review Completed\n                                        </Button>\n                                        </div>\n                                    </div>\n                                    </div>\n                                </div>\n                            </div>\n                            }\n                        </div>\n                    ))\n                }\n                \n            </div>\n        );\n    }\n}\n\nexport { SamplePage };\n"]},"metadata":{},"sourceType":"module"}