{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nexport const generateReport = ({\n  data,\n  fileName\n}) => {\n  const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  const fileExtension = '.xlsx';\n\n  const generateReport = (data, fileName) => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const dataBlob = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(dataBlob, fileName + fileExtension);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: e => generateReport(data, fileName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"Generate Report 2\"));\n}; //         <Button variant=\"warning\" onClick={(e) => exportToCSV(csvData,fileName)}>Export</Button>\n\nclass genReport extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateReport = (data, fileName) => {\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n\n      const generateReport = (data, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = {\n          Sheets: {\n            'data': ws\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = XLSX.write(wb, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        const dataBlob = new Blob([excelBuffer], {\n          type: fileType\n        });\n        FileSaver.saveAs(dataBlob, fileName + fileExtension);\n      };\n    };\n\n    this.state = {\n      user: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user'))\n    });\n    this.generateReport = this.generateReport.bind(this);\n  }\n\n  render() {\n    const {\n      data,\n      fileName\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => generateReport(data, fileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"Generate Report 2\"));\n  }\n\n}\n\nexport { genReport };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/exportData.jsx"],"names":["React","Button","FileSaver","XLSX","generateReport","data","fileName","fileType","fileExtension","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","dataBlob","Blob","saveAs","display","justifyContent","alignItems","e","genReport","Component","constructor","props","state","user","componentDidMount","setState","JSON","parse","localStorage","getItem","bind","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nexport const generateReport = ({data, fileName}) => {\n\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    const generateReport = (data, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(data);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const dataBlob = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(dataBlob, fileName + fileExtension);\n    }\n\n    return (\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n            <Button onClick={(e) => generateReport(data, fileName)}>\n                Generate Report 2\n            </Button>\n        </div>\n    )\n}\n\n//         <Button variant=\"warning\" onClick={(e) => exportToCSV(csvData,fileName)}>Export</Button>\n\nclass genReport extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n        });\n\n        this.generateReport = this.generateReport.bind(this);\n    }\n\n    generateReport = (data, fileName) => {\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n    \n        const generateReport = (data, fileName) => {\n            const ws = XLSX.utils.json_to_sheet(data);\n            const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n            const dataBlob = new Blob([excelBuffer], {type: fileType});\n            FileSaver.saveAs(dataBlob, fileName + fileExtension);\n        }\n    }\n    \n    render() {\n        const { data, fileName } = this.props;\n\n    return (\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\n            <Button onClick={(e) => generateReport(data, fileName)}>\n                Generate Report 2\n            </Button>\n        </div>\n    );\n    }\n}\n\nexport { genReport };\n\n"]},"metadata":{},"sourceType":"module"}