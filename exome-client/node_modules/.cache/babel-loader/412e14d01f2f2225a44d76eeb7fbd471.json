{"ast":null,"code":"import { userService } from '../services/user.service';\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        userService.logout();\n        window.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nconst apiUrl = \"http://localhost:8002\";\n\nfunction getProbands() {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: \"Request for list of probands and phenotypes\"\n    })\n  };\n  return fetch(`${apiUrl}/probands`, requestOptions).then(handleResponse).then(data => {\n    if (data) {\n      return data;\n    }\n\n    return \"Error\";\n  });\n}\n\nfunction getProbandById(proband) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: \"Request for list of probands and phenotypes\"\n    })\n  };\n  return fetch(`${apiUrl}/proband?id=${proband}`, requestOptions).then(handleResponse).then(data => {\n    if (data) {\n      return data;\n    }\n\n    return \"Error\";\n  });\n}\n\nfunction getPheno(proband) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: \"Request for list of probands and phenotypes\"\n    })\n  };\n  return fetch(`${apiUrl}/proband/genes?id=${proband}`, requestOptions).then(handleResponse).then(data => {\n    if (data) {\n      return data;\n    }\n\n    return \"Error\";\n  });\n}\n\nfunction getGenes(proband) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      data: \"Request for list of probands and phenotypes\"\n    })\n  };\n  return fetch(`${apiUrl}/proband/genes?id=${proband}`, requestOptions).then(handleResponse).then(data => {\n    if (data) {\n      return data;\n    }\n\n    return \"Error\";\n  });\n}\n\nexport const api = {\n  getProbands,\n  getProbandById,\n  getPheno,\n  getGenes\n};","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/api.handle.js"],"names":["userService","handleResponse","response","text","then","data","JSON","parse","ok","status","logout","window","location","reload","error","message","statusText","Promise","reject","apiUrl","getProbands","requestOptions","method","headers","body","stringify","fetch","getProbandById","proband","getPheno","getGenes","api"],"mappings":"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","sourcesContent":["import { userService } from '../services/user.service'\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                userService.logout();\n                window.location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n\nconst apiUrl = \"http://localhost:8002\"\n\nfunction getProbands() {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({data: \"Request for list of probands and phenotypes\"})\n    };\n\n    return fetch(`${apiUrl}/probands`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            if (data) {\n                return data\n            }\n            return \"Error\";\n        });\n}\nfunction getProbandById(proband) {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({data: \"Request for list of probands and phenotypes\"})\n    };\n\n    return fetch(`${apiUrl}/proband?id=${proband}`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            if (data) {\n                return data\n            }\n            return \"Error\";\n        });\n}\nfunction getPheno(proband) {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({data: \"Request for list of probands and phenotypes\"})\n    };\n\n    return fetch(`${apiUrl}/proband/genes?id=${proband}`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            if (data) {\n                return data\n            }\n            return \"Error\";\n        });\n}\nfunction getGenes(proband) {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({data: \"Request for list of probands and phenotypes\"})\n    };\n\n    return fetch(`${apiUrl}/proband/genes?id=${proband}`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            if (data) {\n                return data\n            }\n            return \"Error\";\n        });\n}\n\nexport const api = {\n    getProbands,\n    getProbandById,\n    getPheno,\n    getGenes\n};"]},"metadata":{},"sourceType":"module"}