{"ast":null,"code":"export function parse(data){var geneScores=data[0].data;var genes=[];var raw=[];for(var i=0;i<geneScores.length;i++){var gene=geneScores[i];var geneProfile={name:gene.geneIdentifier.geneSymbol,variantScore:gene.variantScore,priorityScore:gene.priorityScore,combinedScore:gene.combinedScore,compatibleInheritanceModes:gene.compatibleInheritanceModes,variantEvaluations:gene.variantEvaluations,geneScores:gene.geneScores,HiPhive:gene.priorityResults.HIPHIVE_PRIORITY.phenotypeEvidence,OMIM:gene.priorityResults.OMIM_PRIORITY.associatedDiseases};var rawGene=gene;genes.push(geneProfile);raw.push(rawGene);}return{genes:genes,raw:raw};}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/exomiser-parser.js"],"names":["parse","data","geneScores","genes","raw","i","length","gene","geneProfile","name","geneIdentifier","geneSymbol","variantScore","priorityScore","combinedScore","compatibleInheritanceModes","variantEvaluations","HiPhive","priorityResults","HIPHIVE_PRIORITY","phenotypeEvidence","OMIM","OMIM_PRIORITY","associatedDiseases","rawGene","push"],"mappings":"AAAA,MAAO,SAASA,CAAAA,KAAT,CAAeC,IAAf,CAAqB,CACxB,GAAIC,CAAAA,UAAU,CAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAzB,CAEA,GAAIE,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,GAAG,CAAG,EAAV,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,UAAU,CAACI,MAA/B,CAAuCD,CAAC,EAAxC,CAA2C,CACvC,GAAME,CAAAA,IAAI,CAAGL,UAAU,CAACG,CAAD,CAAvB,CACA,GAAMG,CAAAA,WAAW,CAAG,CAChBC,IAAI,CAAEF,IAAI,CAACG,cAAL,CAAoBC,UADV,CAEhBC,YAAY,CAAEL,IAAI,CAACK,YAFH,CAGhBC,aAAa,CAAEN,IAAI,CAACM,aAHJ,CAIhBC,aAAa,CAAEP,IAAI,CAACO,aAJJ,CAKhBC,0BAA0B,CAAER,IAAI,CAACQ,0BALjB,CAMhBC,kBAAkB,CAAET,IAAI,CAACS,kBANT,CAOhBd,UAAU,CAAEK,IAAI,CAACL,UAPD,CAQhBe,OAAO,CAAEV,IAAI,CAACW,eAAL,CAAqBC,gBAArB,CAAsCC,iBAR/B,CAShBC,IAAI,CAAEd,IAAI,CAACW,eAAL,CAAqBI,aAArB,CAAmCC,kBATzB,CAApB,CAYA,GAAMC,CAAAA,OAAO,CAAGjB,IAAhB,CAEAJ,KAAK,CAACsB,IAAN,CAAWjB,WAAX,EACAJ,GAAG,CAACqB,IAAJ,CAASD,OAAT,EACH,CAED,MAAO,CAAErB,KAAK,CAALA,KAAF,CAASC,GAAG,CAAHA,GAAT,CAAP,CACH","sourcesContent":["export function parse(data) {\n    let geneScores = data[0].data\n\n    let genes = [];\n    let raw = [];\n\n    for (var i = 0; i < geneScores.length; i++){\n        const gene = geneScores[i]\n        const geneProfile = {\n            name: gene.geneIdentifier.geneSymbol,\n            variantScore: gene.variantScore,\n            priorityScore: gene.priorityScore,\n            combinedScore: gene.combinedScore,\n            compatibleInheritanceModes: gene.compatibleInheritanceModes,\n            variantEvaluations: gene.variantEvaluations,\n            geneScores: gene.geneScores,\n            HiPhive: gene.priorityResults.HIPHIVE_PRIORITY.phenotypeEvidence,\n            OMIM: gene.priorityResults.OMIM_PRIORITY.associatedDiseases\n        }\n\n        const rawGene = gene\n\n        genes.push(geneProfile)\n        raw.push(rawGene)\n    }\n\n    return { genes, raw }\n}"]},"metadata":{},"sourceType":"module"}