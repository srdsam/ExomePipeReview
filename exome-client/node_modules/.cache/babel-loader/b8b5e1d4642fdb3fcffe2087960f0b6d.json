{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\nimport { parseVEP } from '../helpers/vep-parser';\n\nclass Vep extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePatho = () => {\n      const {\n        chromosome,\n        hgsvG\n      } = this.state;\n      console.log(chromosome);\n      console.log(hgsvG);\n      patho.getPathogenicity(chromosome, hgsvG).then(data => {\n        const pData = parseVEP(data);\n        this.setState({\n          pData\n        });\n      });\n    };\n\n    this.state = {\n      isShow: false,\n      user: {},\n      data: [],\n      chromosome: {},\n      hgsvG: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      data: {\n        loading: true\n      },\n      chromosome: this.props.chromosome,\n      hgsvG: this.props.hgsvG\n    });\n    this.updatePatho = this.updatePatho.bind(this);\n  }\n\n  render() {\n    const {\n      data\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updatePatho,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"Get VEP for \", this.props.hgsvG), !data.loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \"VEP Results\"), data.error && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, data.error), data[0] && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, JSON.stringify(data))));\n  }\n\n}\n\nexport { Vep };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx"],"names":["React","Component","Spinner","Nav","Link","Table","patho","parseVEP","Vep","constructor","props","updatePatho","chromosome","hgsvG","state","console","log","getPathogenicity","then","data","pData","setState","isShow","user","componentDidMount","JSON","parse","localStorage","getItem","loading","bind","render","error","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,SAASC,QAAT,QAAyB,uBAAzB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAExBQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwBnBC,WAxBmB,GAwBL,MAAM;AAChB,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAwB,KAAKC,KAAnC;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEAP,MAAAA,KAAK,CAACW,gBAAN,CAAuBL,UAAvB,EAAmCC,KAAnC,EAA0CK,IAA1C,CAA+CC,IAAI,IAAI;AACnD,cAAMC,KAAK,GAAGb,QAAQ,CAACY,IAAD,CAAtB;AACA,aAAKE,QAAL,CAAc;AAAED,UAAAA;AAAF,SAAd;AACH,OAHD;AAIH,KAlCkB;;AAGf,SAAKN,KAAL,GAAa;AACTQ,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTJ,MAAAA,IAAI,EAAE,EAHG;AAITP,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,KAAK,EAAE;AALE,KAAb;AAQH;;AAEDW,EAAAA,iBAAiB,GAAG;AAChB,SAAKH,QAAL,CAAc;AACVE,MAAAA,IAAI,EAAEE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADI;AAEVT,MAAAA,IAAI,EAAE;AAAEU,QAAAA,OAAO,EAAE;AAAX,OAFI;AAGVjB,MAAAA,UAAU,EAAE,KAAKF,KAAL,CAAWE,UAHb;AAIVC,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG;AAJR,KAAd;AAOA,SAAKF,WAAL,GAAmB,KAAKA,WAAL,CAAiBmB,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAcDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEZ,MAAAA;AAAF,QAAW,KAAKL,KAAtB,CADK,CAEL;;AAEJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,KAAKH,WAAtB;AAAmC,MAAA,IAAI,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiB,KAAKD,KAAL,CAAWG,KAD5B,CADJ,EAKC,CAACM,IAAI,CAACU,OAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEKV,IAAI,CAACa,KAAL,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKb,IAAI,CAACa,KADV,CAHR,EAOKb,IAAI,CAAC,CAAD,CAAJ,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKM,IAAI,CAACQ,SAAL,CAAed,IAAf,CADL,CARR,CANJ,CADJ;AAwBC;;AAlEuB;;AAqE5B,SAASX,GAAT","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\n\nimport { parseVEP } from '../helpers/vep-parser'\n\nclass Vep extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isShow: false,\n            user: {},\n            data: [],\n            chromosome: {},\n            hgsvG: {}\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            data: { loading: true },\n            chromosome: this.props.chromosome,\n            hgsvG: this.props.hgsvG\n        });\n\n        this.updatePatho = this.updatePatho.bind(this);\n    }\n\n    updatePatho = () => {\n        const { chromosome, hgsvG } = this.state\n\n        console.log(chromosome)\n        console.log(hgsvG)\n        \n        patho.getPathogenicity(chromosome, hgsvG).then(data => {\n            const pData = parseVEP(data)\n            this.setState({ pData })\n        })\n    }\n    \n    render() {\n        const { data } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div>\n            <button onClick={this.updatePatho} type=\"button\">\n                Get VEP for {this.props.hgsvG}\n            </button>\n\n        {!data.loading && \n            <div>\n                <h2>VEP Results</h2>\n                {data.error && \n                    <div>\n                        {data.error}\n                    </div>\n                }\n                {data[0] && \n                    <div>\n                        {JSON.stringify(data)}\n                    </div>\n                }\n            </div>\n            }\n\n        </div>\n    );\n    }\n}\n\nexport { Vep };\n\n"]},"metadata":{},"sourceType":"module"}