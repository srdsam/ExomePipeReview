{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\nimport { parseVEP } from '../helpers/vep-parser';\n\nclass Vep extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePatho = () => {\n      const {\n        chromosome,\n        hgsvG\n      } = this.state;\n      console.log(chromosome);\n      console.log(hgsvG);\n      patho.getPathogenicity(chromosome, hgsvG).then(data => {\n        parseVEP(data).then(results => {\n          console.log(results);\n          this.setState({\n            data: results.results\n          });\n        });\n      }).then(() => {\n        this.setState({\n          dataLoading: false\n        });\n      });\n    };\n\n    this.state = {\n      isShow: false,\n      user: {},\n      data: [],\n      chromosome: {},\n      hgsvG: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      data: [],\n      dataLoading: true,\n      chromosome: this.props.chromosome,\n      hgsvG: this.props.hgsvG\n    });\n    this.updatePatho = this.updatePatho.bind(this);\n  }\n\n  render() {\n    const {\n      data,\n      dataLoading\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updatePatho,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"Get VEP for \", this.props.hgsvG), !dataLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, \"VEP Results\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, data.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, value.exists ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, value.metaSVM, value.sift_score, value.polyphen_score, value.cadd_raw, value.polyphen2_hdiv_score, value.metalr_score) : JSON.stringify(value))))));\n  }\n\n}\n\nexport { Vep };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx"],"names":["React","Component","Spinner","Nav","Link","Table","patho","parseVEP","Vep","constructor","props","updatePatho","chromosome","hgsvG","state","console","log","getPathogenicity","then","data","results","setState","dataLoading","isShow","user","componentDidMount","JSON","parse","localStorage","getItem","bind","render","map","value","index","exists","metaSVM","sift_score","polyphen_score","cadd_raw","polyphen2_hdiv_score","metalr_score","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\n\nimport { parseVEP } from '../helpers/vep-parser'\n\nclass Vep extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isShow: false,\n            user: {},\n            data: [],\n            chromosome: {},\n            hgsvG: {}\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            data: [],\n            dataLoading: true,\n            chromosome: this.props.chromosome,\n            hgsvG: this.props.hgsvG\n        });\n\n        this.updatePatho = this.updatePatho.bind(this);\n    }\n\n    updatePatho = () => {\n        const { chromosome, hgsvG } = this.state\n\n        console.log(chromosome)\n        console.log(hgsvG)\n        \n        patho.getPathogenicity(chromosome, hgsvG).then(data => {\n            parseVEP(data).then((results) => {\n                console.log(results)\n                this.setState({ data: results.results })\n            })\n        }).then(() => {\n            this.setState({ dataLoading: false })\n\n        })\n    }\n    \n    render() {\n        const { data, dataLoading } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div>\n            <button onClick={this.updatePatho} type=\"button\">\n                Get VEP for {this.props.hgsvG}\n            </button>\n\n        {!dataLoading && \n            <div>\n                <h2>VEP Results</h2>\n\n                <div>\n                    {data.map((value, index) => (\n                        <div>\n                            {\n                            value.exists ?\n                            <div>\n                                {value.metaSVM}\n                                {value.sift_score}\n                                {value.polyphen_score}\n                                {value.cadd_raw}\n                                {value.polyphen2_hdiv_score}\n                                {value.metalr_score}\n                            </div>\n                            :\n                            JSON.stringify(value)\n                            }\n                        </div>\n                    ))\n                    }\n                </div>\n            </div>\n            }\n\n        </div>\n    );\n    }\n}\n\nexport { Vep };\n\n"]},"metadata":{},"sourceType":"module"}