{"ast":null,"code":"import{authHeader}from'../helpers/auth-header';var apiUrl=\"http://localhost:8002\";export var userService={login:login,logout:logout,getAll:getAll};function login(username,password){var requestOptions={method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:username,password:password})};console.log(requestOptions);return fetch(\"\".concat(apiUrl,\"/users/authenticate\"),requestOptions).then(handleResponse).then(function(user){// login successful if there's a user in the response\nif(user){// store user details and basic auth credentials in local storage \n// to keep user logged in between page refreshes\nuser.authdata=window.btoa(username+':'+password);localStorage.setItem('user',JSON.stringify(user));}return user;});}function logout(){// remove user from local storage to log user out\nlocalStorage.removeItem('user');}function getAll(){var requestOptions={method:'GET',headers:authHeader()};return fetch(\"\".concat(apiUrl,\"/users\"),requestOptions).then(handleResponse);}function handleResponse(response){return response.text().then(function(text){var data=text&&JSON.parse(text);if(!response.ok){if(response.status===401){// auto logout if 401 response returned from api\nlogout();window.location.reload(true);}var error=data&&data.message||response.statusText;return Promise.reject(error);}return data;});}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/services/user.service.js"],"names":["authHeader","apiUrl","userService","login","logout","getAll","username","password","requestOptions","method","headers","body","JSON","stringify","console","log","fetch","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAASA,UAAT,KAA2B,wBAA3B,CAEA,GAAMC,CAAAA,MAAM,CAAG,uBAAf,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,CACvBC,KAAK,CAALA,KADuB,CAEvBC,MAAM,CAANA,MAFuB,CAGvBC,MAAM,CAANA,MAHuB,CAApB,CAMP,QAASF,CAAAA,KAAT,CAAeG,QAAf,CAAyBC,QAAzB,CAAmC,CAC/B,GAAMC,CAAAA,cAAc,CAAG,CACnBC,MAAM,CAAE,MADW,CAEnBC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFU,CAGnBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,QAAQ,CAARA,QAAF,CAAYC,QAAQ,CAARA,QAAZ,CAAf,CAHa,CAAvB,CAKAO,OAAO,CAACC,GAAR,CAAYP,cAAZ,EAEA,MAAOQ,CAAAA,KAAK,WAAIf,MAAJ,wBAAiCO,cAAjC,CAAL,CACFS,IADE,CACGC,cADH,EAEFD,IAFE,CAEG,SAAAE,IAAI,CAAI,CACV;AACA,GAAIA,IAAJ,CAAU,CACN;AACA;AACAA,IAAI,CAACC,QAAL,CAAgBC,MAAM,CAACC,IAAP,CAAYhB,QAAQ,CAAG,GAAX,CAAiBC,QAA7B,CAAhB,CACAgB,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA6BZ,IAAI,CAACC,SAAL,CAAeM,IAAf,CAA7B,EACH,CAED,MAAOA,CAAAA,IAAP,CACH,CAZE,CAAP,CAaH,CAED,QAASf,CAAAA,MAAT,EAAkB,CACd;AACAmB,YAAY,CAACE,UAAb,CAAwB,MAAxB,EACH,CAED,QAASpB,CAAAA,MAAT,EAAkB,CACd,GAAMG,CAAAA,cAAc,CAAG,CACnBC,MAAM,CAAE,KADW,CAEnBC,OAAO,CAAEV,UAAU,EAFA,CAAvB,CAKA,MAAOgB,CAAAA,KAAK,WAAIf,MAAJ,WAAoBO,cAApB,CAAL,CAAyCS,IAAzC,CAA8CC,cAA9C,CAAP,CACH,CAED,QAASA,CAAAA,cAAT,CAAwBQ,QAAxB,CAAkC,CAC9B,MAAOA,CAAAA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAqB,SAAAU,IAAI,CAAI,CAChC,GAAMC,CAAAA,IAAI,CAAGD,IAAI,EAAIf,IAAI,CAACiB,KAAL,CAAWF,IAAX,CAArB,CACA,GAAI,CAACD,QAAQ,CAACI,EAAd,CAAkB,CACd,GAAIJ,QAAQ,CAACK,MAAT,GAAoB,GAAxB,CAA6B,CACzB;AACA3B,MAAM,GACNiB,MAAM,CAACW,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB,EACH,CAED,GAAMC,CAAAA,KAAK,CAAIN,IAAI,EAAIA,IAAI,CAACO,OAAd,EAA0BT,QAAQ,CAACU,UAAjD,CACA,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP,CACH,CAED,MAAON,CAAAA,IAAP,CACH,CAdM,CAAP,CAeH","sourcesContent":["import { authHeader } from '../helpers/auth-header';\n\nconst apiUrl = \"http://localhost:8002\"\n\nexport const userService = {\n    login,\n    logout,\n    getAll\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n    console.log(requestOptions)\n\n    return fetch(`${apiUrl}/users/authenticate`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // login successful if there's a user in the response\n            if (user) {\n                // store user details and basic auth credentials in local storage \n                // to keep user logged in between page refreshes\n                user.authdata = window.btoa(username + ':' + password);\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`${apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                window.location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}