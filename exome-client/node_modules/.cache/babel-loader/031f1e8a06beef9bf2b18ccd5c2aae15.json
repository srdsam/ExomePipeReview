{"ast":null,"code":"export function parse(data) {\n  let geneScores = data[0].data;\n  console.log(geneScores);\n  let genes = [];\n  let raw = [];\n\n  for (var i = 0; i < geneScores.length; i++) {\n    const gene = geneScores[i];\n    const geneProfile = {\n      name: gene.geneIdentifier.geneSymbol,\n      variantScore: gene.variantScore,\n      combinedScore: gene.combinedScore,\n      phenotypeScore: gene.phenotypeScore,\n      modeOfInheritance: gene.modeOfInheritance,\n      contributingVariants: gene.contributingVariants\n    };\n    const rawGene = gene;\n    genes.push(geneProfile);\n    raw.push(rawGene);\n  }\n\n  console.log(genes);\n  console.log(raw);\n  return {\n    genes,\n    raw\n  };\n}","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/helpers/exomiser-parser.js"],"names":["parse","data","geneScores","console","log","genes","raw","i","length","gene","geneProfile","name","geneIdentifier","geneSymbol","variantScore","combinedScore","phenotypeScore","modeOfInheritance","contributingVariants","rawGene","push"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACxB,MAAIC,UAAU,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEA,MAAIG,KAAK,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACvC,UAAME,IAAI,GAAGP,UAAU,CAACK,CAAD,CAAvB;AACA,UAAMG,WAAW,GAAG;AAChBC,MAAAA,IAAI,EAAGF,IAAI,CAACG,cAAL,CAAoBC,UADX;AAEhBC,MAAAA,YAAY,EAAEL,IAAI,CAACK,YAFH;AAGhBC,MAAAA,aAAa,EAAEN,IAAI,CAACM,aAHJ;AAIhBC,MAAAA,cAAc,EAAEP,IAAI,CAACO,cAJL;AAKhBC,MAAAA,iBAAiB,EAAER,IAAI,CAACQ,iBALR;AAMhBC,MAAAA,oBAAoB,EAAET,IAAI,CAACS;AANX,KAApB;AASA,UAAMC,OAAO,GAAGV,IAAhB;AAEAJ,IAAAA,KAAK,CAACe,IAAN,CAAWV,WAAX;AACAJ,IAAAA,GAAG,CAACc,IAAJ,CAASD,OAAT;AACH;;AAEDhB,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACH","sourcesContent":["export function parse(data) {\n    let geneScores = data[0].data\n    console.log(geneScores)\n\n    let genes = [];\n    let raw = [];\n\n    for (var i = 0; i < geneScores.length; i++){\n        const gene = geneScores[i]\n        const geneProfile = {\n            name : gene.geneIdentifier.geneSymbol,\n            variantScore: gene.variantScore,\n            combinedScore: gene.combinedScore,\n            phenotypeScore: gene.phenotypeScore,\n            modeOfInheritance: gene.modeOfInheritance,\n            contributingVariants: gene.contributingVariants,\n        }\n\n        const rawGene = gene\n\n        genes.push(geneProfile)\n        raw.push(rawGene)\n    }\n\n    console.log(genes)\n    console.log(raw)\n\n    return { genes, raw }\n}"]},"metadata":{},"sourceType":"module"}