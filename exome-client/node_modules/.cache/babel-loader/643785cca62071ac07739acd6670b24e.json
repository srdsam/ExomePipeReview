{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\n\nclass Vep extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      data: {\n        loading: true\n      }\n    });\n  }\n\n  updatePatho() {\n    /*\n    patho.getPathogenicity(this.props.chromosome, this.props.hgsvG).then(data => {\n        this.setState({ data })\n    })*/\n    console.log(this.props);\n  }\n\n  render() {\n    const {\n      data\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.updatePatho,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, \"Get VEP for \", this.props.hgsvG), !data.loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, \"Clinvar Results\"), JSON.stringify(data)));\n  }\n\n}\n\nexport { Vep };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx"],"names":["React","Component","Spinner","Nav","Link","Table","patho","Vep","constructor","props","state","user","data","componentDidMount","setState","JSON","parse","localStorage","getItem","loading","updatePatho","console","log","render","hgsvG","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,KAAT,QAAsB,yBAAtB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAExBO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AACVH,MAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADI;AAEVN,MAAAA,IAAI,EAAE;AAAEO,QAAAA,OAAO,EAAE;AAAX;AAFI,KAAd;AAIH;;AAEDC,EAAAA,WAAW,GAAG;AACV;;;;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACH;;AAEDc,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEX,MAAAA;AAAF,QAAW,KAAKF,KAAtB,CADK,CAEL;;AAEJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,KAAKU,WAAtB;AAAmC,MAAA,IAAI,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiB,KAAKX,KAAL,CAAWe,KAD5B,CADJ,EAKC,CAACZ,IAAI,CAACO,OAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEKJ,IAAI,CAACU,SAAL,CAAeb,IAAf,CAFL,CANJ,CADJ;AAeC;;AA7CuB;;AAgD5B,SAASL,GAAT","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { patho } from '../services/vep.service';\n\nclass Vep extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            user: {},\n            data: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            data: { loading: true }\n        });\n    }\n\n    updatePatho() {\n        /*\n        patho.getPathogenicity(this.props.chromosome, this.props.hgsvG).then(data => {\n            this.setState({ data })\n        })*/\n        console.log(this.props)\n    }\n    \n    render() {\n        const { data } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div>\n            <button onClick={this.updatePatho} type=\"button\">\n                Get VEP for {this.props.hgsvG}\n            </button>\n\n        {!data.loading && \n            <div>\n                <h2>Clinvar Results</h2>\n                {JSON.stringify(data)}\n            </div>\n            }\n\n        </div>\n    );\n    }\n}\n\nexport { Vep };\n\n"]},"metadata":{},"sourceType":"module"}