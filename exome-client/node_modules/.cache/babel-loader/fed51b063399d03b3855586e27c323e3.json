{"ast":null,"code":"var _jsxFileName = \"/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { patho } from '../services/vep.service';\nimport { parseVEP } from '../helpers/vep-parser';\n\nclass Vep extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePatho = () => {\n      const {\n        chromosome,\n        hgsvG,\n        clicked\n      } = this.state;\n      this.setState({\n        clicked: true\n      });\n      patho.getPathogenicity(chromosome, hgsvG).then(data => {\n        parseVEP(data).then(results => {\n          this.setState({\n            data: results.results\n          });\n          this.setState({\n            clicked: false\n          });\n        });\n      }).then(() => {\n        this.setState(state => ({\n          dataLoading: !state.dataLoading\n        }));\n      });\n    };\n\n    this.state = {\n      isShow: false,\n      user: {},\n      data: [],\n      chromosome: {},\n      hgsvG: {},\n      clicked: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      user: JSON.parse(localStorage.getItem('user')),\n      data: [],\n      dataLoading: true,\n      chromosome: this.props.chromosome,\n      hgsvG: this.props.hgsvG,\n      clicked: false\n    });\n    this.updatePatho = this.updatePatho.bind(this);\n  }\n\n  render() {\n    const {\n      data,\n      dataLoading,\n      clicked\n    } = this.state; // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      onClick: this.updatePatho,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Get variant effect prediction (VEP) for \", String(this.props.hgsvG).substring(0, 15)), !dataLoading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"VEP Results\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, data.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, value.exists ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, index + 1, \". \", value.transcript_id), value.most_severe_consequence && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    }, \"metaSVM \", value.most_severe_consequence), Number.isInteger(parseInt(value.sift_score)) && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 37\n      }\n    }, \"SIFT score \", value.sift_score, \" (\", value.sift_prediction, \")\"), value.metaSVM && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, \"metaSVM \", value.metaSVM, \" (\", value.metaSVM_prediction, \")\"), value.polyphen_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 37\n      }\n    }, \"polyphen_score \", value.polyphen_score, \" (\", value.polyphen_prediction, \")\"), value.cadd_raw && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 37\n      }\n    }, \"cadd_raw \", value.cadd_raw), value.polyphen2_hdiv_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 37\n      }\n    }, \"polyphen2_hdiv_score \", value.polyphen2_hdiv_score), value.metalr_score && /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    }, \"metalr_score \", value.metalr_score, \" (\", value.metalr_prediction, \")\"), !value.metalr_score && !value.polyphen2_hdiv_score && !value.polyphen_score && !value.sift_score && !value.metaSVM && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 37\n      }\n    }, \"No scores returned from Ensemble REST API.\")) : JSON.stringify(value)))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, dataLoading && clicked && /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      variant: \"primary\",\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport { Vep };","map":{"version":3,"sources":["/Users/samueldsouza/Desktop/GGC/ggcRD-Sam/ggcrd-sam/ggcrd-client/src/component/Vep.jsx"],"names":["React","Component","Spinner","Nav","Link","Table","Button","patho","parseVEP","Vep","constructor","props","updatePatho","chromosome","hgsvG","clicked","state","setState","getPathogenicity","then","data","results","dataLoading","isShow","user","componentDidMount","JSON","parse","localStorage","getItem","bind","render","String","substring","map","value","index","exists","transcript_id","most_severe_consequence","Number","isInteger","parseInt","sift_score","sift_prediction","metaSVM","metaSVM_prediction","polyphen_score","polyphen_prediction","cadd_raw","polyphen2_hdiv_score","metalr_score","metalr_prediction","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,SAASC,QAAT,QAAyB,uBAAzB;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAExBS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA2BnBC,WA3BmB,GA2BL,MAAM;AAChB,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,KAAd;AAAqBC,QAAAA;AAArB,UAAiC,KAAKC,KAA5C;AAEA,WAAKC,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEAR,MAAAA,KAAK,CAACW,gBAAN,CAAuBL,UAAvB,EAAmCC,KAAnC,EAA0CK,IAA1C,CAA+CC,IAAI,IAAI;AACnDZ,QAAAA,QAAQ,CAACY,IAAD,CAAR,CAAeD,IAAf,CAAqBE,OAAD,IAAa;AAC7B,eAAKJ,QAAL,CAAc;AAAEG,YAAAA,IAAI,EAAEC,OAAO,CAACA;AAAhB,WAAd;AACA,eAAKJ,QAAL,CAAc;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAAd;AACH,SAHD;AAIH,OALD,EAKGI,IALH,CAKQ,MAAM;AACV,aAAKF,QAAL,CAAcD,KAAK,KAAK;AAAEM,UAAAA,WAAW,EAAE,CAACN,KAAK,CAACM;AAAtB,SAAL,CAAnB;AACH,OAPD;AAQH,KAxCkB;;AAGf,SAAKN,KAAL,GAAa;AACTO,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTJ,MAAAA,IAAI,EAAE,EAHG;AAITP,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,KAAK,EAAE,EALE;AAMTC,MAAAA,OAAO,EAAE;AANA,KAAb;AASH;;AAEDU,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,QAAL,CAAc;AACVO,MAAAA,IAAI,EAAEE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADI;AAEVT,MAAAA,IAAI,EAAE,EAFI;AAGVE,MAAAA,WAAW,EAAE,IAHH;AAIVT,MAAAA,UAAU,EAAE,KAAKF,KAAL,CAAWE,UAJb;AAKVC,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KALR;AAMVC,MAAAA,OAAO,EAAE;AANC,KAAd;AASA,SAAKH,WAAL,GAAmB,KAAKA,WAAL,CAAiBkB,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAiBDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEX,MAAAA,IAAF;AAAQE,MAAAA,WAAR;AAAqBP,MAAAA;AAArB,QAAiC,KAAKC,KAA5C,CADK,CAEL;;AAEJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,OAAO,EAAE,KAAKJ,WAArC;AAAkD,MAAA,IAAI,EAAC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAC6CoB,MAAM,CAAC,KAAKrB,KAAL,CAAWG,KAAZ,CAAN,CAAyBmB,SAAzB,CAAmC,CAAnC,EAAqC,EAArC,CAD7C,CADA,EAKH,CAACX,WAAD,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,IAAI,CAACc,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,kBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEID,KAAK,CAACE,MAAN,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,KAAK,GAAC,CAAX,QAAgBD,KAAK,CAACG,aAAtB,CADJ,EAEKH,KAAK,CAACI,uBAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaJ,KAAK,CAACI,uBAAnB,CAHR,EAIKC,MAAM,CAACC,SAAP,CAAiBC,QAAQ,CAACP,KAAK,CAACQ,UAAP,CAAzB,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBR,KAAK,CAACQ,UAAtB,QAAoCR,KAAK,CAACS,eAA1C,MALR,EAMKT,KAAK,CAACU,OAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaV,KAAK,CAACU,OAAnB,QAA8BV,KAAK,CAACW,kBAApC,MAPR,EAQKX,KAAK,CAACY,cAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoBZ,KAAK,CAACY,cAA1B,QAA4CZ,KAAK,CAACa,mBAAlD,MATR,EAUKb,KAAK,CAACc,QAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAcd,KAAK,CAACc,QAApB,CAXR,EAYKd,KAAK,CAACe,oBAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA0Bf,KAAK,CAACe,oBAAhC,CAbR,EAcKf,KAAK,CAACgB,YAAN,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBhB,KAAK,CAACgB,YAAxB,QAAwChB,KAAK,CAACiB,iBAA9C,MAfR,EAgBK,CAACjB,KAAK,CAACgB,YAAP,IAAuB,CAAChB,KAAK,CAACe,oBAA9B,IAAsD,CAACf,KAAK,CAACY,cAA7D,IAA+E,CAACZ,KAAK,CAACQ,UAAtF,IAAoG,CAACR,KAAK,CAACU,OAA3G,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAjBR,CADA,GAuBAnB,IAAI,CAAC2B,SAAL,CAAelB,KAAf,CAzBJ,CADH,CADL,CAHJ,CANA,CADJ,eA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCb,WAAW,IAAIP,OAAf,iBACG,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,QAAnB;AAA4B,MAAA,IAAI,EAAC,QAAjC;AAA0C,MAAA,OAAO,EAAC,SAAlD;AAA4D,MAAA,IAAI,EAAC,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,CAFJ,CA9CA,CADJ;AAwDC;;AAxGuB;;AA2G5B,SAASN,GAAT","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Nav from 'react-bootstrap/Nav'\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\n\nimport { patho } from '../services/vep.service';\n\nimport { parseVEP } from '../helpers/vep-parser'\n\nclass Vep extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isShow: false,\n            user: {},\n            data: [],\n            chromosome: {},\n            hgsvG: {},\n            clicked: {}\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user')),\n            data: [],\n            dataLoading: true,\n            chromosome: this.props.chromosome,\n            hgsvG: this.props.hgsvG,\n            clicked: false\n        });\n\n        this.updatePatho = this.updatePatho.bind(this);\n    }\n\n    updatePatho = () => {\n        const { chromosome, hgsvG, clicked } = this.state\n\n        this.setState({ clicked: true })\n        \n        patho.getPathogenicity(chromosome, hgsvG).then(data => {\n            parseVEP(data).then((results) => {\n                this.setState({ data: results.results })\n                this.setState({ clicked: false })\n            })\n        }).then(() => {\n            this.setState(state => ({ dataLoading: !state.dataLoading }));\n        })\n    }\n    \n    render() {\n        const { data, dataLoading, clicked } = this.state;\n        // Clinvar API Returns: AminoAcidChange,Chromosome,GeneSymbol,phenotype,NucleotideChange\n\n    return (\n        <div>\n            <div>\n            <Button variant=\"info\" onClick={this.updatePatho} type=\"button\">\n                Get variant effect prediction (VEP) for {String(this.props.hgsvG).substring(0,15)}\n            </Button>\n\n        {!dataLoading &&\n            <div>\n                <h2>VEP Results</h2>\n\n                <div>\n                    {data.map((value, index) => (\n                        <div>\n                            {\n                            value.exists ?\n                            <div>\n                                <h3>{index+1}. {value.transcript_id}</h3>\n                                {value.most_severe_consequence &&\n                                    <li>metaSVM {value.most_severe_consequence}</li>}\n                                {Number.isInteger(parseInt(value.sift_score)) &&\n                                    <li>SIFT score {value.sift_score} ({value.sift_prediction})</li>}\n                                {value.metaSVM &&\n                                    <li>metaSVM {value.metaSVM} ({value.metaSVM_prediction})</li>}\n                                {value.polyphen_score &&\n                                    <li>polyphen_score {value.polyphen_score} ({value.polyphen_prediction})</li>}\n                                {value.cadd_raw &&\n                                    <li>cadd_raw {value.cadd_raw}</li>}\n                                {value.polyphen2_hdiv_score &&\n                                    <li>polyphen2_hdiv_score {value.polyphen2_hdiv_score}</li>}\n                                {value.metalr_score &&\n                                    <li>metalr_score {value.metalr_score} ({value.metalr_prediction})</li>}\n                                {!value.metalr_score && !value.polyphen2_hdiv_score && !value.polyphen_score && !value.sift_score && !value.metaSVM &&\n                                    <div>\n                                        No scores returned from Ensemble REST API.\n                                    </div>}\n                            </div>\n                            :\n                            JSON.stringify(value)\n                            }\n                        </div>\n                    ))\n                    }\n                </div>\n            </div>\n            }\n        </div>\n        <div>\n        {dataLoading && clicked &&\n            <Spinner animation=\"border\" role=\"status\" variant=\"primary\" size=\"lg\">\n            <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        }\n        </div>\n        </div>\n    );\n    }\n}\n\nexport { Vep };\n\n"]},"metadata":{},"sourceType":"module"}